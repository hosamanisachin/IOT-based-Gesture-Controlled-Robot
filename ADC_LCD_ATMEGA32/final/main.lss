
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00000cfc  00000d90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800118  00800118  00000e48  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a4  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017d9  00000000  00000000  0000321b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000049f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000493  00000000  00000000  00004c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d34  00000000  00000000  000050c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005dfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 31       	cpi	r26, 0x18	; 24
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e1       	ldi	r26, 0x18	; 24
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 35       	cpi	r26, 0x5A	; 90
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 03 	call	0x63e	; 0x63e <main>
  8a:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <func>:

char str[20];

void func(int x)
{
		if(x==0)
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	79 f5       	brne	.+94     	; 0xf4 <func+0x62>
	{	
		if(adc_flag)
  96:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc_flag>
  9a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <adc_flag+0x1>
  9e:	89 2b       	or	r24, r25
  a0:	f9 f0       	breq	.+62     	; 0xe0 <func+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e7       	ldi	r18, 0x7F	; 127
  a4:	38 e3       	ldi	r19, 0x38	; 56
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <func+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <func+0x20>
  b2:	00 00       	nop
		{
			_delay_ms(100);
			adc_val1 = adc_val;
  b4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <adc_val>
  b8:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <adc_val+0x1>
  bc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <adc_val1+0x1>
  c0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <adc_val1>
			adc_flag = 0;
  c4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <adc_flag+0x1>
  c8:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <adc_flag>
			adc_flag1 = 0;
  cc:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <adc_flag1+0x1>
  d0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <adc_flag1>
			adc_flag2 = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_flag2+0x1>
  dc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_flag2>
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	90 e7       	ldi	r25, 0x70	; 112
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	20 40       	sbci	r18, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <func+0x54>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <func+0x5e>
  f0:	00 00       	nop
		}
		
	}
		_delay_ms(200);
		
}
  f2:	08 95       	ret
		else if(x==1)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	99 f7       	brne	.-26     	; 0xe0 <func+0x4e>
		if(adc_flag)
  fa:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <adc_flag>
  fe:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <adc_flag+0x1>
 102:	23 2b       	or	r18, r19
 104:	69 f3       	breq	.-38     	; 0xe0 <func+0x4e>
 106:	2f e7       	ldi	r18, 0x7F	; 127
 108:	38 e3       	ldi	r19, 0x38	; 56
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <func+0x7a>
 114:	00 c0       	rjmp	.+0      	; 0x116 <func+0x84>
 116:	00 00       	nop
			adc_val2 = adc_val;
 118:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <adc_val>
 11c:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <adc_val+0x1>
 120:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <adc_val2+0x1>
 124:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <adc_val2>
			adc_flag = 0;
 128:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <adc_flag+0x1>
 12c:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <adc_flag>
			adc_flag2= 0;
 130:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <adc_flag2+0x1>
 134:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <adc_flag2>
			adc_flag1 = 1;			
 138:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <adc_flag1+0x1>
 13c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <adc_flag1>
 140:	cf cf       	rjmp	.-98     	; 0xe0 <func+0x4e>

00000142 <print>:

void print()
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
	if(adc_val1<=152 && adc_val1>=147 && adc_val2<=159 && adc_val2>=152)
 146:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 14a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 14e:	89 39       	cpi	r24, 0x99	; 153
 150:	91 05       	cpc	r25, r1
 152:	08 f0       	brcs	.+2      	; 0x156 <print+0x14>
 154:	7b c0       	rjmp	.+246    	; 0x24c <print+0x10a>
 156:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 15a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 15e:	83 39       	cpi	r24, 0x93	; 147
 160:	91 05       	cpc	r25, r1
 162:	08 f4       	brcc	.+2      	; 0x166 <print+0x24>
 164:	73 c0       	rjmp	.+230    	; 0x24c <print+0x10a>
 166:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 16a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 16e:	80 3a       	cpi	r24, 0xA0	; 160
 170:	91 05       	cpc	r25, r1
 172:	08 f0       	brcs	.+2      	; 0x176 <print+0x34>
 174:	6b c0       	rjmp	.+214    	; 0x24c <print+0x10a>
 176:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 17a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 17e:	88 39       	cpi	r24, 0x98	; 152
 180:	91 05       	cpc	r25, r1
 182:	08 f4       	brcc	.+2      	; 0x186 <print+0x44>
 184:	63 c0       	rjmp	.+198    	; 0x24c <print+0x10a>
		ch=2;
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	90 e0       	ldi	r25, 0x00	; 0
	else if(adc_val1>=159 && adc_val1<=163 && adc_val2<=159 && adc_val2>=152)
		ch=1;
 18a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 18e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	if(adc_val2<=152 && adc_val2>=147 && adc_val1<=159 && adc_val1>=152)
 192:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 196:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 19a:	89 39       	cpi	r24, 0x99	; 153
 19c:	91 05       	cpc	r25, r1
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <print+0x60>
 1a0:	78 c0       	rjmp	.+240    	; 0x292 <print+0x150>
 1a2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 1a6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 1aa:	83 39       	cpi	r24, 0x93	; 147
 1ac:	91 05       	cpc	r25, r1
 1ae:	08 f4       	brcc	.+2      	; 0x1b2 <print+0x70>
 1b0:	70 c0       	rjmp	.+224    	; 0x292 <print+0x150>
 1b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 1b6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 1ba:	80 3a       	cpi	r24, 0xA0	; 160
 1bc:	91 05       	cpc	r25, r1
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <print+0x80>
 1c0:	68 c0       	rjmp	.+208    	; 0x292 <print+0x150>
 1c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 1c6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 1ca:	88 39       	cpi	r24, 0x98	; 152
 1cc:	91 05       	cpc	r25, r1
 1ce:	08 f4       	brcc	.+2      	; 0x1d2 <print+0x90>
 1d0:	60 c0       	rjmp	.+192    	; 0x292 <print+0x150>
		ch=4;
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	90 e0       	ldi	r25, 0x00	; 0
	else if(adc_val2>=159 && adc_val2<=163 && adc_val1<=159 && adc_val1>=152 )
		ch=3;
 1d6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 1da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	else if (adc_val1<=159 && adc_val1>=152 && adc_val2<=159 && adc_val2>=152)
		ch=0;
	
	sprintf(str, "Move: %d", ch);
 1de:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1e2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 1e6:	9f 93       	push	r25
 1e8:	8f 93       	push	r24
 1ea:	86 e8       	ldi	r24, 0x86	; 134
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9f 93       	push	r25
 1f0:	8f 93       	push	r24
 1f2:	c6 e2       	ldi	r28, 0x26	; 38
 1f4:	d1 e0       	ldi	r29, 0x01	; 1
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	0e 94 b3 03 	call	0x766	; 0x766 <sprintf>
	lcd_putstring(1, str);
 1fe:	be 01       	movw	r22, r28
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <lcd_putstring>
	
	
	sprintf(str, "1:%4d 2:%4d",adc_val1,adc_val2);
 206:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <adc_val2>
 20a:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <adc_val2+0x1>
 20e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 212:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 216:	3f 93       	push	r19
 218:	2f 93       	push	r18
 21a:	9f 93       	push	r25
 21c:	8f 93       	push	r24
 21e:	8f e8       	ldi	r24, 0x8F	; 143
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9f 93       	push	r25
 224:	8f 93       	push	r24
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	0e 94 b3 03 	call	0x766	; 0x766 <sprintf>
	lcd_putstring(0, str);
 22e:	be 01       	movw	r22, r28
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <lcd_putstring>
	//sprintf(str, "val2:%4d",adc_val2);
	//lcd_putstring(1, str);
	
}
 236:	8d b7       	in	r24, 0x3d	; 61
 238:	9e b7       	in	r25, 0x3e	; 62
 23a:	0e 96       	adiw	r24, 0x0e	; 14
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	9e bf       	out	0x3e, r25	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	8d bf       	out	0x3d, r24	; 61
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret
	else if(adc_val1>=159 && adc_val1<=163 && adc_val2<=159 && adc_val2>=152)
 24c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 250:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 254:	8f 39       	cpi	r24, 0x9F	; 159
 256:	91 05       	cpc	r25, r1
 258:	08 f4       	brcc	.+2      	; 0x25c <print+0x11a>
 25a:	9b cf       	rjmp	.-202    	; 0x192 <print+0x50>
 25c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 260:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 264:	84 3a       	cpi	r24, 0xA4	; 164
 266:	91 05       	cpc	r25, r1
 268:	08 f0       	brcs	.+2      	; 0x26c <print+0x12a>
 26a:	93 cf       	rjmp	.-218    	; 0x192 <print+0x50>
 26c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 270:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 274:	80 3a       	cpi	r24, 0xA0	; 160
 276:	91 05       	cpc	r25, r1
 278:	08 f0       	brcs	.+2      	; 0x27c <print+0x13a>
 27a:	8b cf       	rjmp	.-234    	; 0x192 <print+0x50>
 27c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 280:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 284:	88 39       	cpi	r24, 0x98	; 152
 286:	91 05       	cpc	r25, r1
 288:	08 f4       	brcc	.+2      	; 0x28c <print+0x14a>
 28a:	83 cf       	rjmp	.-250    	; 0x192 <print+0x50>
		ch=1;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	7c cf       	rjmp	.-264    	; 0x18a <print+0x48>
	else if(adc_val2>=159 && adc_val2<=163 && adc_val1<=159 && adc_val1>=152 )
 292:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 296:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 29a:	8f 39       	cpi	r24, 0x9F	; 159
 29c:	91 05       	cpc	r25, r1
 29e:	c0 f0       	brcs	.+48     	; 0x2d0 <print+0x18e>
 2a0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 2a4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 2a8:	84 3a       	cpi	r24, 0xA4	; 164
 2aa:	91 05       	cpc	r25, r1
 2ac:	88 f4       	brcc	.+34     	; 0x2d0 <print+0x18e>
 2ae:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 2b2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 2b6:	80 3a       	cpi	r24, 0xA0	; 160
 2b8:	91 05       	cpc	r25, r1
 2ba:	50 f4       	brcc	.+20     	; 0x2d0 <print+0x18e>
 2bc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 2c0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 2c4:	88 39       	cpi	r24, 0x98	; 152
 2c6:	91 05       	cpc	r25, r1
 2c8:	18 f0       	brcs	.+6      	; 0x2d0 <print+0x18e>
		ch=3;
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	83 cf       	rjmp	.-250    	; 0x1d6 <print+0x94>
	else if (adc_val1<=159 && adc_val1>=152 && adc_val2<=159 && adc_val2>=152)
 2d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 2d4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 2d8:	80 3a       	cpi	r24, 0xA0	; 160
 2da:	91 05       	cpc	r25, r1
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <print+0x19e>
 2de:	7f cf       	rjmp	.-258    	; 0x1de <print+0x9c>
 2e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <adc_val1>
 2e4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <adc_val1+0x1>
 2e8:	88 39       	cpi	r24, 0x98	; 152
 2ea:	91 05       	cpc	r25, r1
 2ec:	08 f4       	brcc	.+2      	; 0x2f0 <print+0x1ae>
 2ee:	77 cf       	rjmp	.-274    	; 0x1de <print+0x9c>
 2f0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 2f4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 2f8:	80 3a       	cpi	r24, 0xA0	; 160
 2fa:	91 05       	cpc	r25, r1
 2fc:	08 f0       	brcs	.+2      	; 0x300 <print+0x1be>
 2fe:	6f cf       	rjmp	.-290    	; 0x1de <print+0x9c>
 300:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <adc_val2>
 304:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <adc_val2+0x1>
 308:	88 39       	cpi	r24, 0x98	; 152
 30a:	91 05       	cpc	r25, r1
 30c:	08 f4       	brcc	.+2      	; 0x310 <print+0x1ce>
 30e:	67 cf       	rjmp	.-306    	; 0x1de <print+0x9c>
		ch=0;
 310:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
 314:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 318:	62 cf       	rjmp	.-316    	; 0x1de <print+0x9c>

0000031a <esp>:

void esp()
	{
				
		uart_puts("AT+CIPSTART=0,\"TCP\",\"192.168.43.241\",4500\r\n");
 31a:	8b e9       	ldi	r24, 0x9B	; 155
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	89 e6       	ldi	r24, 0x69	; 105
 326:	98 e1       	ldi	r25, 0x18	; 24
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <esp+0xe>
 330:	00 c0       	rjmp	.+0      	; 0x332 <esp+0x18>
 332:	00 00       	nop
		_delay_ms(2000);

		uart_puts("AT+CIPSEND=0,15\r\n");
 334:	87 ec       	ldi	r24, 0xC7	; 199
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	89 e6       	ldi	r24, 0x69	; 105
 340:	98 e1       	ldi	r25, 0x18	; 24
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <esp+0x28>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <esp+0x32>
 34c:	00 00       	nop
		_delay_ms(2000);

		sprintf(str2, "GET /cart/%d\r\n", ch1);
 34e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch1>
 352:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ch1+0x1>
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	89 ed       	ldi	r24, 0xD9	; 217
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	9f 93       	push	r25
 360:	8f 93       	push	r24
 362:	8a e3       	ldi	r24, 0x3A	; 58
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	9f 93       	push	r25
 368:	8f 93       	push	r24
 36a:	0e 94 b3 03 	call	0x766	; 0x766 <sprintf>

		uart_puts(str2);
 36e:	8a e3       	ldi	r24, 0x3A	; 58
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 376:	2f ef       	ldi	r18, 0xFF	; 255
 378:	89 e6       	ldi	r24, 0x69	; 105
 37a:	98 e1       	ldi	r25, 0x18	; 24
 37c:	21 50       	subi	r18, 0x01	; 1
 37e:	80 40       	sbci	r24, 0x00	; 0
 380:	90 40       	sbci	r25, 0x00	; 0
 382:	e1 f7       	brne	.-8      	; 0x37c <esp+0x62>
 384:	00 c0       	rjmp	.+0      	; 0x386 <esp+0x6c>
 386:	00 00       	nop
		_delay_ms(2000);

		uart_puts("\r\n");
 388:	84 ec       	ldi	r24, 0xC4	; 196
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	84 e3       	ldi	r24, 0x34	; 52
 394:	9c e0       	ldi	r25, 0x0C	; 12
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <esp+0x7c>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <esp+0x86>
 3a0:	00 00       	nop
		_delay_ms(1000);
	
		uart_puts("AT+CIPCLOSE\r\n");
 3a2:	88 ee       	ldi	r24, 0xE8	; 232
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	89 e6       	ldi	r24, 0x69	; 105
 3ae:	98 e1       	ldi	r25, 0x18	; 24
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <esp+0x96>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <esp+0xa0>
 3ba:	00 00       	nop
		_delay_ms(2000);
		ch1=ch;	
 3bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 3c0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 3c4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ch1+0x1>
 3c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ch1>
	}
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	08 95       	ret

000003da <adc>:

void adc()
	{	
		if(adc_flag2==0)
 3da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <adc_flag2>
 3de:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <adc_flag2+0x1>
 3e2:	89 2b       	or	r24, r25
 3e4:	19 f5       	brne	.+70     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
		{	
		adc_flag1 = adc_select(ADC_1);
 3e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ADC_1>
 3ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ADC_1+0x1>
 3ee:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <adc_select>
 3f2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <adc_flag1+0x1>
 3f6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <adc_flag1>
		func(0);
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 49 00 	call	0x92	; 0x92 <func>
		} 	
		else
		_delay_ms(200); // need this delay so as to select ADC 2
		
		
		if(adc_flag1==0){
 402:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <adc_flag1>
 406:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <adc_flag1+0x1>
 40a:	89 2b       	or	r24, r25
 40c:	c9 f4       	brne	.+50     	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
		adc_flag2 = adc_select(ADC_2);
 40e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ADC_2>
 412:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <ADC_2+0x1>
 416:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <adc_select>
 41a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <adc_flag2+0x1>
 41e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <adc_flag2>
		func(1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 49 00 	call	0x92	; 0x92 <func>
 42a:	08 95       	ret
 42c:	2f ef       	ldi	r18, 0xFF	; 255
 42e:	80 e7       	ldi	r24, 0x70	; 112
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	21 50       	subi	r18, 0x01	; 1
 434:	80 40       	sbci	r24, 0x00	; 0
 436:	90 40       	sbci	r25, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
 43e:	e1 cf       	rjmp	.-62     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	80 e7       	ldi	r24, 0x70	; 112
 444:	92 e0       	ldi	r25, 0x02	; 2
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 450:	00 00       	nop
		}
		else
		_delay_ms(200);
	}
 452:	08 95       	ret

00000454 <uart_init>:
#include "uart.h"

void uart_init(uint32_t baud)
{
 454:	9b 01       	movw	r18, r22
 456:	ac 01       	movw	r20, r24
	// set up baud rate
	uint16_t ubrr = (F_CPU >> 4) / baud - 1;
 458:	60 e9       	ldi	r22, 0x90	; 144
 45a:	70 ed       	ldi	r23, 0xD0	; 208
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 91 03 	call	0x722	; 0x722 <__udivmodsi4>
 464:	21 50       	subi	r18, 0x01	; 1
 466:	31 09       	sbc	r19, r1
	UBRRL = ubrr & 0x00FF;
 468:	29 b9       	out	0x09, r18	; 9
	UBRRH = ubrr >> 8;
 46a:	30 bd       	out	0x20, r19	; 32
	// 8-bit transfer, no parity, 1 stop bit
	UCSRC = BV(URSEL) | BV(UCSZ1) | BV(UCSZ0);
 46c:	86 e8       	ldi	r24, 0x86	; 134
 46e:	80 bd       	out	0x20, r24	; 32
	// enable tx, rx
	UCSRB = BV(TXEN) | BV(RXEN);
 470:	88 e1       	ldi	r24, 0x18	; 24
 472:	8a b9       	out	0x0a, r24	; 10
}
 474:	08 95       	ret

00000476 <uart_putch>:

void uart_putch(char ch)
{
	// wait while UDRE bit is 0
	while((UCSRA & BV(UDRE))==0);
 476:	5d 9b       	sbis	0x0b, 5	; 11
 478:	fe cf       	rjmp	.-4      	; 0x476 <uart_putch>
	// then write data to UDR
	UDR = ch;
 47a:	8c b9       	out	0x0c, r24	; 12
}
 47c:	08 95       	ret

0000047e <uart_getch>:
char uart_getch()
{
	// wait while RXC bit is 0
	while((UCSRA & BV(RXC))==0);
 47e:	5f 9b       	sbis	0x0b, 7	; 11
 480:	fe cf       	rjmp	.-4      	; 0x47e <uart_getch>
	// then read data from UDR
	return (char)UDR;
 482:	8c b1       	in	r24, 0x0c	; 12
}
 484:	08 95       	ret

00000486 <uart_puts>:
void uart_puts(char str[])
{
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; str[i]!='\0'; i++)
 48e:	c0 e0       	ldi	r28, 0x00	; 0
 490:	f8 01       	movw	r30, r16
 492:	ec 0f       	add	r30, r28
 494:	f1 1d       	adc	r31, r1
 496:	80 81       	ld	r24, Z
 498:	81 11       	cpse	r24, r1
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <uart_puts+0x1e>
		uart_putch(str[i]);
}
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret
		uart_putch(str[i]);
 4a4:	0e 94 3b 02 	call	0x476	; 0x476 <uart_putch>
	for(i=0; str[i]!='\0'; i++)
 4a8:	cf 5f       	subi	r28, 0xFF	; 255
 4aa:	f2 cf       	rjmp	.-28     	; 0x490 <uart_puts+0xa>

000004ac <uart_gets>:
void uart_gets(char str[])
{
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	8c 01       	movw	r16, r24
	char ch;
	uint8_t i=0;
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		ch = uart_getch();
 4b6:	0e 94 3f 02 	call	0x47e	; 0x47e <uart_getch>
		str[i++] = ch;
 4ba:	e1 e0       	ldi	r30, 0x01	; 1
 4bc:	ec 0f       	add	r30, r28
 4be:	d8 01       	movw	r26, r16
 4c0:	ac 0f       	add	r26, r28
 4c2:	b1 1d       	adc	r27, r1
 4c4:	8c 93       	st	X, r24
	} while (ch!='\r');
 4c6:	8d 30       	cpi	r24, 0x0D	; 13
 4c8:	79 f4       	brne	.+30     	; 0x4e8 <uart_gets+0x3c>
	str[i++] = '\n';
 4ca:	e0 0f       	add	r30, r16
 4cc:	f1 2f       	mov	r31, r17
 4ce:	f1 1d       	adc	r31, r1
 4d0:	8a e0       	ldi	r24, 0x0A	; 10
 4d2:	80 83       	st	Z, r24
 4d4:	e2 e0       	ldi	r30, 0x02	; 2
 4d6:	ec 0f       	add	r30, r28
	str[i] = '\0';
 4d8:	e0 0f       	add	r30, r16
 4da:	f1 2f       	mov	r31, r17
 4dc:	f1 1d       	adc	r31, r1
 4de:	10 82       	st	Z, r1
}
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	08 95       	ret
		str[i++] = ch;
 4e8:	ce 2f       	mov	r28, r30
 4ea:	e5 cf       	rjmp	.-54     	; 0x4b6 <uart_gets+0xa>

000004ec <lcd_write_nibble>:
#define LCD_CTRL_MASK (BV(LCD_BL)|BV(LCD_EN)|BV(LCD_RW)|BV(LCD_RS))

void lcd_write_nibble(uint8_t rs, uint8_t val)
{
	// rs=0: for cmd	and rs=1: for data
	if(rs==LCD_CMD)
 4ec:	81 11       	cpse	r24, r1
 4ee:	0e c0       	rjmp	.+28     	; 0x50c <lcd_write_nibble+0x20>
		LCD_CTRL_PORT &= ~BV(LCD_RS);
 4f0:	c7 98       	cbi	0x18, 7	; 24
	else
		LCD_CTRL_PORT |= BV(LCD_RS);
	
	asm("nop");		
 4f2:	00 00       	nop

	LCD_CTRL_PORT &= ~BV(LCD_RW);	//rw=0:	write operation
 4f4:	c6 98       	cbi	0x18, 6	; 24

	LCD_DATA_PORT &= ~LCD_DATA_MASK;
 4f6:	88 b3       	in	r24, 0x18	; 24
 4f8:	80 7f       	andi	r24, 0xF0	; 240
 4fa:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_PORT |= val & 0x0F;	// write nibble
 4fc:	88 b3       	in	r24, 0x18	; 24
 4fe:	6f 70       	andi	r22, 0x0F	; 15
 500:	68 2b       	or	r22, r24
 502:	68 bb       	out	0x18, r22	; 24
	
	LCD_CTRL_PORT |= BV(LCD_EN);	//en=1
 504:	c5 9a       	sbi	0x18, 5	; 24
	asm("nop");
 506:	00 00       	nop
	LCD_CTRL_PORT &= ~BV(LCD_EN);	//en=0
 508:	c5 98       	cbi	0x18, 5	; 24
}
 50a:	08 95       	ret
		LCD_CTRL_PORT |= BV(LCD_RS);
 50c:	c7 9a       	sbi	0x18, 7	; 24
 50e:	f1 cf       	rjmp	.-30     	; 0x4f2 <lcd_write_nibble+0x6>

00000510 <lcd_write>:

void lcd_write(uint8_t rs, uint8_t val)
{
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
 514:	d8 2f       	mov	r29, r24
 516:	c6 2f       	mov	r28, r22
 518:	87 eb       	ldi	r24, 0xB7	; 183
 51a:	9b e0       	ldi	r25, 0x0B	; 11
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <lcd_write+0xc>
 520:	00 c0       	rjmp	.+0      	; 0x522 <lcd_write+0x12>
 522:	00 00       	nop
	uint8_t high = val >> 4, low = val & 0x0F;
 524:	62 95       	swap	r22
 526:	6f 70       	andi	r22, 0x0F	; 15
	_delay_ms(3);	
	lcd_write_nibble(rs, high);
 528:	8d 2f       	mov	r24, r29
 52a:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_write_nibble>
	uint8_t high = val >> 4, low = val & 0x0F;
 52e:	6c 2f       	mov	r22, r28
 530:	6f 70       	andi	r22, 0x0F	; 15
	lcd_write_nibble(rs, low);
 532:	8d 2f       	mov	r24, r29
 534:	0e 94 76 02 	call	0x4ec	; 0x4ec <lcd_write_nibble>
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <lcd_init>:

void lcd_init()
{
	// set data and ctrl port as output
	LCD_DATA_DIR |= LCD_DATA_MASK;
 53e:	87 b3       	in	r24, 0x17	; 23
 540:	8f 60       	ori	r24, 0x0F	; 15
 542:	87 bb       	out	0x17, r24	; 23
	LCD_DATA_PORT &= ~LCD_DATA_MASK;
 544:	88 b3       	in	r24, 0x18	; 24
 546:	80 7f       	andi	r24, 0xF0	; 240
 548:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL_DIR |= LCD_CTRL_MASK;
 54a:	87 b3       	in	r24, 0x17	; 23
 54c:	80 6f       	ori	r24, 0xF0	; 240
 54e:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT &= ~LCD_CTRL_MASK;
 550:	88 b3       	in	r24, 0x18	; 24
 552:	8f 70       	andi	r24, 0x0F	; 15
 554:	88 bb       	out	0x18, r24	; 24
 556:	2f e7       	ldi	r18, 0x7F	; 127
 558:	88 e3       	ldi	r24, 0x38	; 56
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	21 50       	subi	r18, 0x01	; 1
 55e:	80 40       	sbci	r24, 0x00	; 0
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <lcd_init+0x1e>
 564:	00 c0       	rjmp	.+0      	; 0x566 <lcd_init+0x28>
 566:	00 00       	nop
	_delay_ms(100);

	// send commands to lcd

	// DL(0)=>4bit	N(1)=>2 lcd lines	F(0)=>font 5x8
	lcd_write(LCD_CMD, 0x28);
 568:	68 e2       	ldi	r22, 0x28	; 40
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	0e 94 88 02 	call	0x510	; 0x510 <lcd_write>
	
	// D(1)=>display on	C(0)=>no cursor	B(0)=>no blink
	lcd_write(LCD_CMD, 0x0C);
 570:	6c e0       	ldi	r22, 0x0C	; 12
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 88 02 	call	0x510	; 0x510 <lcd_write>
	
	// lcd clear
	lcd_write(LCD_CMD, 0x01);
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	0e 94 88 02 	call	0x510	; 0x510 <lcd_write>
	
	// I/D(1)=>increment cursor	S(0)=>no shift
	//lcd_write(LCD_CMD, 0x06);
}
 580:	08 95       	ret

00000582 <lcd_gotoxy>:

int lcd_gotoxy(uint8_t row, uint8_t col)
{
	if(row>1 || col>15)
 582:	82 30       	cpi	r24, 0x02	; 2
 584:	68 f4       	brcc	.+26     	; 0x5a0 <lcd_gotoxy+0x1e>
 586:	60 31       	cpi	r22, 0x10	; 16
 588:	58 f4       	brcc	.+22     	; 0x5a0 <lcd_gotoxy+0x1e>
		return 0; // false => failed
	if(row==0)	//row 0: ADDR = 0x00
 58a:	81 11       	cpse	r24, r1
 58c:	06 c0       	rjmp	.+12     	; 0x59a <lcd_gotoxy+0x18>
		lcd_write(LCD_CMD, 0x80+col);
 58e:	60 58       	subi	r22, 0x80	; 128
	else		//row 1: ADDR = 0x40
		lcd_write(LCD_CMD, 0xC0+col);	
 590:	0e 94 88 02 	call	0x510	; 0x510 <lcd_write>
	return 1; // true => success
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	08 95       	ret
		lcd_write(LCD_CMD, 0xC0+col);	
 59a:	60 54       	subi	r22, 0x40	; 64
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <lcd_gotoxy+0xe>
		return 0; // false => failed
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	80 e0       	ldi	r24, 0x00	; 0
}
 5a4:	08 95       	ret

000005a6 <lcd_putchar>:

void lcd_putchar(char ch)
{
	lcd_write(LCD_DATA, ch);
 5a6:	68 2f       	mov	r22, r24
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 88 02 	call	0x510	; 0x510 <lcd_write>
}
 5ae:	08 95       	ret

000005b0 <lcd_putstring>:

void lcd_putstring(uint8_t row, const char *str)
{
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	8b 01       	movw	r16, r22
	int cnt;
	lcd_gotoxy(row, 0);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	0e 94 c1 02 	call	0x582	; 0x582 <lcd_gotoxy>
	for(cnt=0; *str!='\0' && cnt<16; ++cnt)
 5c0:	e8 01       	movw	r28, r16
 5c2:	0f 5e       	subi	r16, 0xEF	; 239
 5c4:	1f 4f       	sbci	r17, 0xFF	; 255
 5c6:	89 91       	ld	r24, Y+
 5c8:	88 23       	and	r24, r24
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <lcd_putstring+0x22>
 5cc:	c0 17       	cp	r28, r16
 5ce:	d1 07       	cpc	r29, r17
 5d0:	29 f4       	brne	.+10     	; 0x5dc <lcd_putstring+0x2c>
		lcd_putchar(*str++);
}
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret
		lcd_putchar(*str++);
 5dc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <lcd_putchar>
 5e0:	f2 cf       	rjmp	.-28     	; 0x5c6 <lcd_putstring+0x16>

000005e2 <adc_init>:
volatile uint16_t adc_flag=0;

void adc_init(void)
{
	// set PORTA as input
	DDRA = 0x00; //~BV(ADC_CHANNEL);
 5e2:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; // BV(ADC_CHANNEL);
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	8b bb       	out	0x1b, r24	; 27

	// enable adc and adc interrupt
	ADCSRA = BV(ADEN) | BV(ADIE);
 5e8:	88 e8       	ldi	r24, 0x88	; 136
 5ea:	86 b9       	out	0x06, r24	; 6
	// enable global interrupt
	sei();
 5ec:	78 94       	sei
}
 5ee:	08 95       	ret

000005f0 <adc_select>:

int adc_select(int chan)
{	
	ADMUX = 0x00; //clear the ADMUX
 5f0:	17 b8       	out	0x07, r1	; 7
	if(chan==2)
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	91 05       	cpc	r25, r1
 5f6:	31 f4       	brne	.+12     	; 0x604 <adc_select+0x14>
	{	
		ADMUX = 0x62; //BV(MUX0) | BV(MUX1) | BV(ADLAR) | BV(REFS0); //select ADC2
 5f8:	82 e6       	ldi	r24, 0x62	; 98
 5fa:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= BV(ADSC); //start conversion
 5fc:	36 9a       	sbi	0x06, 6	; 6
		return 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	08 95       	ret
	}

	else if(chan==3)
 604:	03 97       	sbiw	r24, 0x03	; 3
 606:	31 f4       	brne	.+12     	; 0x614 <adc_select+0x24>
	{
		ADMUX = 0x63; //BV(MUX2) | BV(ADLAR) | BV(REFS0); //select ADC3
 608:	83 e6       	ldi	r24, 0x63	; 99
 60a:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= BV(ADSC); //start conversion
 60c:	36 9a       	sbi	0x06, 6	; 6
		return 2;
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	08 95       	ret
	}
}
 614:	08 95       	ret

00000616 <adc_read>:


uint16_t adc_read(void)
{
	// read value from adc
	uint16_t val = ADCH;
 616:	85 b1       	in	r24, 0x05	; 5
	//decide for left and right
	

	return val;
}
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	08 95       	ret

0000061c <__vector_16>:

ISR(ADC_vect)
{
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
	uint16_t val = ADCH;
 620:	85 b1       	in	r24, 0x05	; 5
 622:	90 e0       	ldi	r25, 0x00	; 0
	adc_val = adc_read();
 624:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <adc_val+0x1>
 628:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <adc_val>
	adc_flag = 1;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <adc_flag+0x1>
 634:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_flag>
}
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	18 95       	reti

0000063e <main>:
int main()
{
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
 642:	a0 97       	sbiw	r28, 0x20	; 32
 644:	0f b6       	in	r0, 0x3f	; 63
 646:	f8 94       	cli
 648:	de bf       	out	0x3e, r29	; 62
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	cd bf       	out	0x3d, r28	; 61
	char str[32],str1[32]="On LCD";
 64e:	87 e0       	ldi	r24, 0x07	; 7
 650:	e6 e6       	ldi	r30, 0x66	; 102
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	de 01       	movw	r26, r28
 656:	11 96       	adiw	r26, 0x01	; 1
 658:	01 90       	ld	r0, Z+
 65a:	0d 92       	st	X+, r0
 65c:	8a 95       	dec	r24
 65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x1a>
 660:	fe 01       	movw	r30, r28
 662:	38 96       	adiw	r30, 0x08	; 8
 664:	89 e1       	ldi	r24, 0x19	; 25
 666:	df 01       	movw	r26, r30
 668:	1d 92       	st	X+, r1
 66a:	8a 95       	dec	r24
 66c:	e9 f7       	brne	.-6      	; 0x668 <main+0x2a>
	const char ch='\r';
	char *ret;

	adc_init();
 66e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <adc_init>
	lcd_init();
 672:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_init>
	uart_init(9600);
 676:	60 e8       	ldi	r22, 0x80	; 128
 678:	75 e2       	ldi	r23, 0x25	; 37
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 2a 02 	call	0x454	; 0x454 <uart_init>

	lcd_putstring(0, str1);
 682:	be 01       	movw	r22, r28
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <lcd_putstring>
 68e:	bf ef       	ldi	r27, 0xFF	; 255
 690:	24 e3       	ldi	r18, 0x34	; 52
 692:	8c e0       	ldi	r24, 0x0C	; 12
 694:	b1 50       	subi	r27, 0x01	; 1
 696:	20 40       	sbci	r18, 0x00	; 0
 698:	80 40       	sbci	r24, 0x00	; 0
 69a:	e1 f7       	brne	.-8      	; 0x694 <main+0x56>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <main+0x60>
 69e:	00 00       	nop
	_delay_ms(1000);
	uart_puts("AT\r\n");
 6a0:	86 ef       	ldi	r24, 0xF6	; 246
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 6a8:	9f ef       	ldi	r25, 0xFF	; 255
 6aa:	a9 e6       	ldi	r26, 0x69	; 105
 6ac:	b8 e1       	ldi	r27, 0x18	; 24
 6ae:	91 50       	subi	r25, 0x01	; 1
 6b0:	a0 40       	sbci	r26, 0x00	; 0
 6b2:	b0 40       	sbci	r27, 0x00	; 0
 6b4:	e1 f7       	brne	.-8      	; 0x6ae <main+0x70>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x7a>
 6b8:	00 00       	nop
	_delay_ms(2000);
	//uart_puts("AT+UART_CUR=9600,8,1,0,0\r\n");

	uart_puts("AT+CIPMODE=0\r\n");
 6ba:	8b ef       	ldi	r24, 0xFB	; 251
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 6c2:	2f ef       	ldi	r18, 0xFF	; 255
 6c4:	84 e3       	ldi	r24, 0x34	; 52
 6c6:	9c e0       	ldi	r25, 0x0C	; 12
 6c8:	21 50       	subi	r18, 0x01	; 1
 6ca:	80 40       	sbci	r24, 0x00	; 0
 6cc:	90 40       	sbci	r25, 0x00	; 0
 6ce:	e1 f7       	brne	.-8      	; 0x6c8 <main+0x8a>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <main+0x94>
 6d2:	00 00       	nop
	_delay_ms(1000);

	uart_puts("AT+CIPMUX=1\r\n");
 6d4:	8a e0       	ldi	r24, 0x0A	; 10
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 6dc:	af ef       	ldi	r26, 0xFF	; 255
 6de:	b4 e3       	ldi	r27, 0x34	; 52
 6e0:	2c e0       	ldi	r18, 0x0C	; 12
 6e2:	a1 50       	subi	r26, 0x01	; 1
 6e4:	b0 40       	sbci	r27, 0x00	; 0
 6e6:	20 40       	sbci	r18, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0xa4>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0xae>
 6ec:	00 00       	nop
	
	while(1)
	{
		
		
		adc();
 6ee:	0e 94 ed 01 	call	0x3da	; 0x3da <adc>
		print(); //print both the ADC obtained value
 6f2:	0e 94 a1 00 	call	0x142	; 0x142 <print>


		uart_puts("AT\r\n");
 6f6:	86 ef       	ldi	r24, 0xF6	; 246
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 43 02 	call	0x486	; 0x486 <uart_puts>
 6fe:	8f ef       	ldi	r24, 0xFF	; 255
 700:	90 e7       	ldi	r25, 0x70	; 112
 702:	a2 e0       	ldi	r26, 0x02	; 2
 704:	81 50       	subi	r24, 0x01	; 1
 706:	90 40       	sbci	r25, 0x00	; 0
 708:	a0 40       	sbci	r26, 0x00	; 0
 70a:	e1 f7       	brne	.-8      	; 0x704 <main+0xc6>
 70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0xd0>
 70e:	00 00       	nop
		_delay_ms(200);
		
		if(ch!=ch1)
 710:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ch1>
 714:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ch1+0x1>
 718:	0d 97       	sbiw	r24, 0x0d	; 13
 71a:	49 f3       	breq	.-46     	; 0x6ee <main+0xb0>
		{
		//send data to esp
		esp();
 71c:	0e 94 8d 01 	call	0x31a	; 0x31a <esp>
 720:	e6 cf       	rjmp	.-52     	; 0x6ee <main+0xb0>

00000722 <__udivmodsi4>:
 722:	a1 e2       	ldi	r26, 0x21	; 33
 724:	1a 2e       	mov	r1, r26
 726:	aa 1b       	sub	r26, r26
 728:	bb 1b       	sub	r27, r27
 72a:	fd 01       	movw	r30, r26
 72c:	0d c0       	rjmp	.+26     	; 0x748 <__udivmodsi4_ep>

0000072e <__udivmodsi4_loop>:
 72e:	aa 1f       	adc	r26, r26
 730:	bb 1f       	adc	r27, r27
 732:	ee 1f       	adc	r30, r30
 734:	ff 1f       	adc	r31, r31
 736:	a2 17       	cp	r26, r18
 738:	b3 07       	cpc	r27, r19
 73a:	e4 07       	cpc	r30, r20
 73c:	f5 07       	cpc	r31, r21
 73e:	20 f0       	brcs	.+8      	; 0x748 <__udivmodsi4_ep>
 740:	a2 1b       	sub	r26, r18
 742:	b3 0b       	sbc	r27, r19
 744:	e4 0b       	sbc	r30, r20
 746:	f5 0b       	sbc	r31, r21

00000748 <__udivmodsi4_ep>:
 748:	66 1f       	adc	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	88 1f       	adc	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	1a 94       	dec	r1
 752:	69 f7       	brne	.-38     	; 0x72e <__udivmodsi4_loop>
 754:	60 95       	com	r22
 756:	70 95       	com	r23
 758:	80 95       	com	r24
 75a:	90 95       	com	r25
 75c:	9b 01       	movw	r18, r22
 75e:	ac 01       	movw	r20, r24
 760:	bd 01       	movw	r22, r26
 762:	cf 01       	movw	r24, r30
 764:	08 95       	ret

00000766 <sprintf>:
 766:	ae e0       	ldi	r26, 0x0E	; 14
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	e9 eb       	ldi	r30, 0xB9	; 185
 76c:	f3 e0       	ldi	r31, 0x03	; 3
 76e:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__prologue_saves__+0x1c>
 772:	0d 89       	ldd	r16, Y+21	; 0x15
 774:	1e 89       	ldd	r17, Y+22	; 0x16
 776:	86 e0       	ldi	r24, 0x06	; 6
 778:	8c 83       	std	Y+4, r24	; 0x04
 77a:	1a 83       	std	Y+2, r17	; 0x02
 77c:	09 83       	std	Y+1, r16	; 0x01
 77e:	8f ef       	ldi	r24, 0xFF	; 255
 780:	9f e7       	ldi	r25, 0x7F	; 127
 782:	9e 83       	std	Y+6, r25	; 0x06
 784:	8d 83       	std	Y+5, r24	; 0x05
 786:	ae 01       	movw	r20, r28
 788:	47 5e       	subi	r20, 0xE7	; 231
 78a:	5f 4f       	sbci	r21, 0xFF	; 255
 78c:	6f 89       	ldd	r22, Y+23	; 0x17
 78e:	78 8d       	ldd	r23, Y+24	; 0x18
 790:	ce 01       	movw	r24, r28
 792:	01 96       	adiw	r24, 0x01	; 1
 794:	0e 94 d6 03 	call	0x7ac	; 0x7ac <vfprintf>
 798:	2f 81       	ldd	r18, Y+7	; 0x07
 79a:	38 85       	ldd	r19, Y+8	; 0x08
 79c:	02 0f       	add	r16, r18
 79e:	13 1f       	adc	r17, r19
 7a0:	f8 01       	movw	r30, r16
 7a2:	10 82       	st	Z, r1
 7a4:	2e 96       	adiw	r28, 0x0e	; 14
 7a6:	e4 e0       	ldi	r30, 0x04	; 4
 7a8:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__epilogue_restores__+0x1c>

000007ac <vfprintf>:
 7ac:	ab e0       	ldi	r26, 0x0B	; 11
 7ae:	b0 e0       	ldi	r27, 0x00	; 0
 7b0:	ec ed       	ldi	r30, 0xDC	; 220
 7b2:	f3 e0       	ldi	r31, 0x03	; 3
 7b4:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__prologue_saves__>
 7b8:	7c 01       	movw	r14, r24
 7ba:	3b 01       	movw	r6, r22
 7bc:	8a 01       	movw	r16, r20
 7be:	fc 01       	movw	r30, r24
 7c0:	17 82       	std	Z+7, r1	; 0x07
 7c2:	16 82       	std	Z+6, r1	; 0x06
 7c4:	83 81       	ldd	r24, Z+3	; 0x03
 7c6:	81 ff       	sbrs	r24, 1
 7c8:	b9 c1       	rjmp	.+882    	; 0xb3c <__stack+0x2dd>
 7ca:	9a e0       	ldi	r25, 0x0A	; 10
 7cc:	29 2e       	mov	r2, r25
 7ce:	ce 01       	movw	r24, r28
 7d0:	01 96       	adiw	r24, 0x01	; 1
 7d2:	5c 01       	movw	r10, r24
 7d4:	f7 01       	movw	r30, r14
 7d6:	93 81       	ldd	r25, Z+3	; 0x03
 7d8:	f3 01       	movw	r30, r6
 7da:	93 fd       	sbrc	r25, 3
 7dc:	85 91       	lpm	r24, Z+
 7de:	93 ff       	sbrs	r25, 3
 7e0:	81 91       	ld	r24, Z+
 7e2:	3f 01       	movw	r6, r30
 7e4:	88 23       	and	r24, r24
 7e6:	09 f4       	brne	.+2      	; 0x7ea <vfprintf+0x3e>
 7e8:	46 c1       	rjmp	.+652    	; 0xa76 <__stack+0x217>
 7ea:	85 32       	cpi	r24, 0x25	; 37
 7ec:	39 f4       	brne	.+14     	; 0x7fc <vfprintf+0x50>
 7ee:	93 fd       	sbrc	r25, 3
 7f0:	85 91       	lpm	r24, Z+
 7f2:	93 ff       	sbrs	r25, 3
 7f4:	81 91       	ld	r24, Z+
 7f6:	3f 01       	movw	r6, r30
 7f8:	85 32       	cpi	r24, 0x25	; 37
 7fa:	29 f4       	brne	.+10     	; 0x806 <vfprintf+0x5a>
 7fc:	b7 01       	movw	r22, r14
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 804:	e7 cf       	rjmp	.-50     	; 0x7d4 <vfprintf+0x28>
 806:	91 2c       	mov	r9, r1
 808:	41 2c       	mov	r4, r1
 80a:	51 2c       	mov	r5, r1
 80c:	ff e1       	ldi	r31, 0x1F	; 31
 80e:	f5 15       	cp	r31, r5
 810:	38 f0       	brcs	.+14     	; 0x820 <vfprintf+0x74>
 812:	8b 32       	cpi	r24, 0x2B	; 43
 814:	09 f1       	breq	.+66     	; 0x858 <vfprintf+0xac>
 816:	88 f4       	brcc	.+34     	; 0x83a <vfprintf+0x8e>
 818:	80 32       	cpi	r24, 0x20	; 32
 81a:	01 f1       	breq	.+64     	; 0x85c <vfprintf+0xb0>
 81c:	83 32       	cpi	r24, 0x23	; 35
 81e:	21 f1       	breq	.+72     	; 0x868 <__stack+0x9>
 820:	57 fc       	sbrc	r5, 7
 822:	3a c0       	rjmp	.+116    	; 0x898 <__stack+0x39>
 824:	20 ed       	ldi	r18, 0xD0	; 208
 826:	28 0f       	add	r18, r24
 828:	2a 30       	cpi	r18, 0x0A	; 10
 82a:	40 f5       	brcc	.+80     	; 0x87c <__stack+0x1d>
 82c:	56 fe       	sbrs	r5, 6
 82e:	1f c0       	rjmp	.+62     	; 0x86e <__stack+0xf>
 830:	92 9c       	mul	r9, r2
 832:	20 0d       	add	r18, r0
 834:	11 24       	eor	r1, r1
 836:	92 2e       	mov	r9, r18
 838:	06 c0       	rjmp	.+12     	; 0x846 <vfprintf+0x9a>
 83a:	8d 32       	cpi	r24, 0x2D	; 45
 83c:	91 f0       	breq	.+36     	; 0x862 <__stack+0x3>
 83e:	80 33       	cpi	r24, 0x30	; 48
 840:	79 f7       	brne	.-34     	; 0x820 <vfprintf+0x74>
 842:	68 94       	set
 844:	50 f8       	bld	r5, 0
 846:	f3 01       	movw	r30, r6
 848:	93 fd       	sbrc	r25, 3
 84a:	85 91       	lpm	r24, Z+
 84c:	93 ff       	sbrs	r25, 3
 84e:	81 91       	ld	r24, Z+
 850:	3f 01       	movw	r6, r30
 852:	81 11       	cpse	r24, r1
 854:	db cf       	rjmp	.-74     	; 0x80c <vfprintf+0x60>
 856:	20 c0       	rjmp	.+64     	; 0x898 <__stack+0x39>
 858:	68 94       	set
 85a:	51 f8       	bld	r5, 1
 85c:	68 94       	set
 85e:	52 f8       	bld	r5, 2
 860:	f2 cf       	rjmp	.-28     	; 0x846 <vfprintf+0x9a>
 862:	68 94       	set
 864:	53 f8       	bld	r5, 3
 866:	ef cf       	rjmp	.-34     	; 0x846 <vfprintf+0x9a>
 868:	68 94       	set
 86a:	54 f8       	bld	r5, 4
 86c:	ec cf       	rjmp	.-40     	; 0x846 <vfprintf+0x9a>
 86e:	42 9c       	mul	r4, r2
 870:	20 0d       	add	r18, r0
 872:	11 24       	eor	r1, r1
 874:	42 2e       	mov	r4, r18
 876:	68 94       	set
 878:	55 f8       	bld	r5, 5
 87a:	e5 cf       	rjmp	.-54     	; 0x846 <vfprintf+0x9a>
 87c:	8e 32       	cpi	r24, 0x2E	; 46
 87e:	29 f4       	brne	.+10     	; 0x88a <__stack+0x2b>
 880:	56 fc       	sbrc	r5, 6
 882:	f9 c0       	rjmp	.+498    	; 0xa76 <__stack+0x217>
 884:	68 94       	set
 886:	56 f8       	bld	r5, 6
 888:	de cf       	rjmp	.-68     	; 0x846 <vfprintf+0x9a>
 88a:	8c 36       	cpi	r24, 0x6C	; 108
 88c:	19 f4       	brne	.+6      	; 0x894 <__stack+0x35>
 88e:	68 94       	set
 890:	57 f8       	bld	r5, 7
 892:	d9 cf       	rjmp	.-78     	; 0x846 <vfprintf+0x9a>
 894:	88 36       	cpi	r24, 0x68	; 104
 896:	b9 f2       	breq	.-82     	; 0x846 <vfprintf+0x9a>
 898:	98 2f       	mov	r25, r24
 89a:	9f 7d       	andi	r25, 0xDF	; 223
 89c:	95 54       	subi	r25, 0x45	; 69
 89e:	93 30       	cpi	r25, 0x03	; 3
 8a0:	c0 f0       	brcs	.+48     	; 0x8d2 <__stack+0x73>
 8a2:	83 36       	cpi	r24, 0x63	; 99
 8a4:	a1 f1       	breq	.+104    	; 0x90e <__stack+0xaf>
 8a6:	83 37       	cpi	r24, 0x73	; 115
 8a8:	c1 f1       	breq	.+112    	; 0x91a <__stack+0xbb>
 8aa:	83 35       	cpi	r24, 0x53	; 83
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__stack+0x51>
 8ae:	5b c0       	rjmp	.+182    	; 0x966 <__stack+0x107>
 8b0:	f8 01       	movw	r30, r16
 8b2:	c1 90       	ld	r12, Z+
 8b4:	d1 90       	ld	r13, Z+
 8b6:	8f 01       	movw	r16, r30
 8b8:	69 2d       	mov	r22, r9
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	56 fc       	sbrc	r5, 6
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <__stack+0x65>
 8c0:	6f ef       	ldi	r22, 0xFF	; 255
 8c2:	7f ef       	ldi	r23, 0xFF	; 255
 8c4:	c6 01       	movw	r24, r12
 8c6:	0e 94 a1 05 	call	0xb42	; 0xb42 <strnlen_P>
 8ca:	4c 01       	movw	r8, r24
 8cc:	68 94       	set
 8ce:	57 f8       	bld	r5, 7
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <__stack+0x87>
 8d2:	0c 5f       	subi	r16, 0xFC	; 252
 8d4:	1f 4f       	sbci	r17, 0xFF	; 255
 8d6:	2f e3       	ldi	r18, 0x3F	; 63
 8d8:	29 83       	std	Y+1, r18	; 0x01
 8da:	88 24       	eor	r8, r8
 8dc:	83 94       	inc	r8
 8de:	91 2c       	mov	r9, r1
 8e0:	65 01       	movw	r12, r10
 8e2:	e8 94       	clt
 8e4:	57 f8       	bld	r5, 7
 8e6:	53 fc       	sbrc	r5, 3
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <__stack+0x93>
 8ea:	48 14       	cp	r4, r8
 8ec:	19 04       	cpc	r1, r9
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <__stack+0x93>
 8f0:	18 f5       	brcc	.+70     	; 0x938 <__stack+0xd9>
 8f2:	34 2c       	mov	r3, r4
 8f4:	81 14       	cp	r8, r1
 8f6:	91 04       	cpc	r9, r1
 8f8:	31 f5       	brne	.+76     	; 0x946 <__stack+0xe7>
 8fa:	33 20       	and	r3, r3
 8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0xa1>
 8fe:	6a cf       	rjmp	.-300    	; 0x7d4 <vfprintf+0x28>
 900:	b7 01       	movw	r22, r14
 902:	80 e2       	ldi	r24, 0x20	; 32
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 90a:	3a 94       	dec	r3
 90c:	f6 cf       	rjmp	.-20     	; 0x8fa <__stack+0x9b>
 90e:	f8 01       	movw	r30, r16
 910:	80 81       	ld	r24, Z
 912:	89 83       	std	Y+1, r24	; 0x01
 914:	0e 5f       	subi	r16, 0xFE	; 254
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	e0 cf       	rjmp	.-64     	; 0x8da <__stack+0x7b>
 91a:	f8 01       	movw	r30, r16
 91c:	c1 90       	ld	r12, Z+
 91e:	d1 90       	ld	r13, Z+
 920:	8f 01       	movw	r16, r30
 922:	69 2d       	mov	r22, r9
 924:	70 e0       	ldi	r23, 0x00	; 0
 926:	56 fc       	sbrc	r5, 6
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0xcf>
 92a:	6f ef       	ldi	r22, 0xFF	; 255
 92c:	7f ef       	ldi	r23, 0xFF	; 255
 92e:	c6 01       	movw	r24, r12
 930:	0e 94 ac 05 	call	0xb58	; 0xb58 <strnlen>
 934:	4c 01       	movw	r8, r24
 936:	d5 cf       	rjmp	.-86     	; 0x8e2 <__stack+0x83>
 938:	b7 01       	movw	r22, r14
 93a:	80 e2       	ldi	r24, 0x20	; 32
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 942:	4a 94       	dec	r4
 944:	d2 cf       	rjmp	.-92     	; 0x8ea <__stack+0x8b>
 946:	f6 01       	movw	r30, r12
 948:	57 fc       	sbrc	r5, 7
 94a:	85 91       	lpm	r24, Z+
 94c:	57 fe       	sbrs	r5, 7
 94e:	81 91       	ld	r24, Z+
 950:	6f 01       	movw	r12, r30
 952:	b7 01       	movw	r22, r14
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 95a:	31 10       	cpse	r3, r1
 95c:	3a 94       	dec	r3
 95e:	f1 e0       	ldi	r31, 0x01	; 1
 960:	8f 1a       	sub	r8, r31
 962:	91 08       	sbc	r9, r1
 964:	c7 cf       	rjmp	.-114    	; 0x8f4 <__stack+0x95>
 966:	84 36       	cpi	r24, 0x64	; 100
 968:	19 f0       	breq	.+6      	; 0x970 <__stack+0x111>
 96a:	89 36       	cpi	r24, 0x69	; 105
 96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x111>
 96e:	74 c0       	rjmp	.+232    	; 0xa58 <__stack+0x1f9>
 970:	f8 01       	movw	r30, r16
 972:	57 fe       	sbrs	r5, 7
 974:	6a c0       	rjmp	.+212    	; 0xa4a <__stack+0x1eb>
 976:	61 91       	ld	r22, Z+
 978:	71 91       	ld	r23, Z+
 97a:	81 91       	ld	r24, Z+
 97c:	91 91       	ld	r25, Z+
 97e:	8f 01       	movw	r16, r30
 980:	25 2d       	mov	r18, r5
 982:	2f 76       	andi	r18, 0x6F	; 111
 984:	d2 2e       	mov	r13, r18
 986:	97 ff       	sbrs	r25, 7
 988:	09 c0       	rjmp	.+18     	; 0x99c <__stack+0x13d>
 98a:	90 95       	com	r25
 98c:	80 95       	com	r24
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	68 94       	set
 99a:	d7 f8       	bld	r13, 7
 99c:	2a e0       	ldi	r18, 0x0A	; 10
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	a5 01       	movw	r20, r10
 9a2:	0e 94 e7 05 	call	0xbce	; 0xbce <__ultoa_invert>
 9a6:	c8 2e       	mov	r12, r24
 9a8:	ca 18       	sub	r12, r10
 9aa:	8c 2c       	mov	r8, r12
 9ac:	5d 2c       	mov	r5, r13
 9ae:	d6 fe       	sbrs	r13, 6
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__stack+0x16b>
 9b2:	e8 94       	clt
 9b4:	50 f8       	bld	r5, 0
 9b6:	c9 14       	cp	r12, r9
 9b8:	40 f4       	brcc	.+16     	; 0x9ca <__stack+0x16b>
 9ba:	d4 fe       	sbrs	r13, 4
 9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <__stack+0x169>
 9be:	d2 fc       	sbrc	r13, 2
 9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <__stack+0x169>
 9c2:	fd 2d       	mov	r31, r13
 9c4:	fe 7e       	andi	r31, 0xEE	; 238
 9c6:	5f 2e       	mov	r5, r31
 9c8:	89 2c       	mov	r8, r9
 9ca:	54 fe       	sbrs	r5, 4
 9cc:	8f c0       	rjmp	.+286    	; 0xaec <__stack+0x28d>
 9ce:	fe 01       	movw	r30, r28
 9d0:	ec 0d       	add	r30, r12
 9d2:	f1 1d       	adc	r31, r1
 9d4:	80 81       	ld	r24, Z
 9d6:	80 33       	cpi	r24, 0x30	; 48
 9d8:	09 f0       	breq	.+2      	; 0x9dc <__stack+0x17d>
 9da:	81 c0       	rjmp	.+258    	; 0xade <__stack+0x27f>
 9dc:	25 2d       	mov	r18, r5
 9de:	29 7e       	andi	r18, 0xE9	; 233
 9e0:	52 2e       	mov	r5, r18
 9e2:	85 2d       	mov	r24, r5
 9e4:	88 70       	andi	r24, 0x08	; 8
 9e6:	38 2e       	mov	r3, r24
 9e8:	53 fc       	sbrc	r5, 3
 9ea:	8f c0       	rjmp	.+286    	; 0xb0a <__stack+0x2ab>
 9ec:	50 fe       	sbrs	r5, 0
 9ee:	89 c0       	rjmp	.+274    	; 0xb02 <__stack+0x2a3>
 9f0:	9c 2c       	mov	r9, r12
 9f2:	84 14       	cp	r8, r4
 9f4:	18 f4       	brcc	.+6      	; 0x9fc <__stack+0x19d>
 9f6:	4c 0c       	add	r4, r12
 9f8:	94 2c       	mov	r9, r4
 9fa:	98 18       	sub	r9, r8
 9fc:	54 fe       	sbrs	r5, 4
 9fe:	8b c0       	rjmp	.+278    	; 0xb16 <__stack+0x2b7>
 a00:	b7 01       	movw	r22, r14
 a02:	80 e3       	ldi	r24, 0x30	; 48
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 a0a:	52 fe       	sbrs	r5, 2
 a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__stack+0x1c1>
 a0e:	88 e7       	ldi	r24, 0x78	; 120
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	51 fe       	sbrs	r5, 1
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <__stack+0x1bb>
 a16:	88 e5       	ldi	r24, 0x58	; 88
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	b7 01       	movw	r22, r14
 a1c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 a20:	c9 14       	cp	r12, r9
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__stack+0x1c7>
 a24:	84 c0       	rjmp	.+264    	; 0xb2e <__stack+0x2cf>
 a26:	ca 94       	dec	r12
 a28:	d1 2c       	mov	r13, r1
 a2a:	9f ef       	ldi	r25, 0xFF	; 255
 a2c:	c9 1a       	sub	r12, r25
 a2e:	d9 0a       	sbc	r13, r25
 a30:	ca 0c       	add	r12, r10
 a32:	db 1c       	adc	r13, r11
 a34:	f6 01       	movw	r30, r12
 a36:	82 91       	ld	r24, -Z
 a38:	6f 01       	movw	r12, r30
 a3a:	b7 01       	movw	r22, r14
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 a42:	ac 14       	cp	r10, r12
 a44:	bd 04       	cpc	r11, r13
 a46:	b1 f7       	brne	.-20     	; 0xa34 <__stack+0x1d5>
 a48:	58 cf       	rjmp	.-336    	; 0x8fa <__stack+0x9b>
 a4a:	61 91       	ld	r22, Z+
 a4c:	71 91       	ld	r23, Z+
 a4e:	07 2e       	mov	r0, r23
 a50:	00 0c       	add	r0, r0
 a52:	88 0b       	sbc	r24, r24
 a54:	99 0b       	sbc	r25, r25
 a56:	93 cf       	rjmp	.-218    	; 0x97e <__stack+0x11f>
 a58:	d5 2c       	mov	r13, r5
 a5a:	e8 94       	clt
 a5c:	d4 f8       	bld	r13, 4
 a5e:	2a e0       	ldi	r18, 0x0A	; 10
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	85 37       	cpi	r24, 0x75	; 117
 a64:	39 f1       	breq	.+78     	; 0xab4 <__stack+0x255>
 a66:	95 2d       	mov	r25, r5
 a68:	99 7f       	andi	r25, 0xF9	; 249
 a6a:	d9 2e       	mov	r13, r25
 a6c:	8f 36       	cpi	r24, 0x6F	; 111
 a6e:	01 f1       	breq	.+64     	; 0xab0 <__stack+0x251>
 a70:	48 f4       	brcc	.+18     	; 0xa84 <__stack+0x225>
 a72:	88 35       	cpi	r24, 0x58	; 88
 a74:	a9 f0       	breq	.+42     	; 0xaa0 <__stack+0x241>
 a76:	f7 01       	movw	r30, r14
 a78:	86 81       	ldd	r24, Z+6	; 0x06
 a7a:	97 81       	ldd	r25, Z+7	; 0x07
 a7c:	2b 96       	adiw	r28, 0x0b	; 11
 a7e:	e2 e1       	ldi	r30, 0x12	; 18
 a80:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__epilogue_restores__>
 a84:	80 37       	cpi	r24, 0x70	; 112
 a86:	49 f0       	breq	.+18     	; 0xa9a <__stack+0x23b>
 a88:	88 37       	cpi	r24, 0x78	; 120
 a8a:	a9 f7       	brne	.-22     	; 0xa76 <__stack+0x217>
 a8c:	d4 fe       	sbrs	r13, 4
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <__stack+0x235>
 a90:	68 94       	set
 a92:	d2 f8       	bld	r13, 2
 a94:	20 e1       	ldi	r18, 0x10	; 16
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	0d c0       	rjmp	.+26     	; 0xab4 <__stack+0x255>
 a9a:	68 94       	set
 a9c:	d4 f8       	bld	r13, 4
 a9e:	f6 cf       	rjmp	.-20     	; 0xa8c <__stack+0x22d>
 aa0:	54 fe       	sbrs	r5, 4
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <__stack+0x24b>
 aa4:	e9 2f       	mov	r30, r25
 aa6:	e6 60       	ori	r30, 0x06	; 6
 aa8:	de 2e       	mov	r13, r30
 aaa:	20 e1       	ldi	r18, 0x10	; 16
 aac:	32 e0       	ldi	r19, 0x02	; 2
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <__stack+0x255>
 ab0:	28 e0       	ldi	r18, 0x08	; 8
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	f8 01       	movw	r30, r16
 ab6:	d7 fe       	sbrs	r13, 7
 ab8:	0d c0       	rjmp	.+26     	; 0xad4 <__stack+0x275>
 aba:	61 91       	ld	r22, Z+
 abc:	71 91       	ld	r23, Z+
 abe:	81 91       	ld	r24, Z+
 ac0:	91 91       	ld	r25, Z+
 ac2:	8f 01       	movw	r16, r30
 ac4:	a5 01       	movw	r20, r10
 ac6:	0e 94 e7 05 	call	0xbce	; 0xbce <__ultoa_invert>
 aca:	c8 2e       	mov	r12, r24
 acc:	ca 18       	sub	r12, r10
 ace:	e8 94       	clt
 ad0:	d7 f8       	bld	r13, 7
 ad2:	6b cf       	rjmp	.-298    	; 0x9aa <__stack+0x14b>
 ad4:	61 91       	ld	r22, Z+
 ad6:	71 91       	ld	r23, Z+
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	80 e0       	ldi	r24, 0x00	; 0
 adc:	f2 cf       	rjmp	.-28     	; 0xac2 <__stack+0x263>
 ade:	52 fc       	sbrc	r5, 2
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <__stack+0x287>
 ae2:	83 94       	inc	r8
 ae4:	7e cf       	rjmp	.-260    	; 0x9e2 <__stack+0x183>
 ae6:	83 94       	inc	r8
 ae8:	83 94       	inc	r8
 aea:	7b cf       	rjmp	.-266    	; 0x9e2 <__stack+0x183>
 aec:	85 2d       	mov	r24, r5
 aee:	86 78       	andi	r24, 0x86	; 134
 af0:	09 f4       	brne	.+2      	; 0xaf4 <__stack+0x295>
 af2:	77 cf       	rjmp	.-274    	; 0x9e2 <__stack+0x183>
 af4:	f6 cf       	rjmp	.-20     	; 0xae2 <__stack+0x283>
 af6:	b7 01       	movw	r22, r14
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 b00:	83 94       	inc	r8
 b02:	84 14       	cp	r8, r4
 b04:	c0 f3       	brcs	.-16     	; 0xaf6 <__stack+0x297>
 b06:	31 2c       	mov	r3, r1
 b08:	79 cf       	rjmp	.-270    	; 0x9fc <__stack+0x19d>
 b0a:	34 2c       	mov	r3, r4
 b0c:	38 18       	sub	r3, r8
 b0e:	84 14       	cp	r8, r4
 b10:	08 f4       	brcc	.+2      	; 0xb14 <__stack+0x2b5>
 b12:	74 cf       	rjmp	.-280    	; 0x9fc <__stack+0x19d>
 b14:	f8 cf       	rjmp	.-16     	; 0xb06 <__stack+0x2a7>
 b16:	85 2d       	mov	r24, r5
 b18:	86 78       	andi	r24, 0x86	; 134
 b1a:	09 f4       	brne	.+2      	; 0xb1e <__stack+0x2bf>
 b1c:	81 cf       	rjmp	.-254    	; 0xa20 <__stack+0x1c1>
 b1e:	8b e2       	ldi	r24, 0x2B	; 43
 b20:	51 fe       	sbrs	r5, 1
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	57 fc       	sbrc	r5, 7
 b26:	8d e2       	ldi	r24, 0x2D	; 45
 b28:	b7 01       	movw	r22, r14
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	77 cf       	rjmp	.-274    	; 0xa1c <__stack+0x1bd>
 b2e:	b7 01       	movw	r22, r14
 b30:	80 e3       	ldi	r24, 0x30	; 48
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	0e 94 b7 05 	call	0xb6e	; 0xb6e <fputc>
 b38:	9a 94       	dec	r9
 b3a:	72 cf       	rjmp	.-284    	; 0xa20 <__stack+0x1c1>
 b3c:	8f ef       	ldi	r24, 0xFF	; 255
 b3e:	9f ef       	ldi	r25, 0xFF	; 255
 b40:	9d cf       	rjmp	.-198    	; 0xa7c <__stack+0x21d>

00000b42 <strnlen_P>:
 b42:	fc 01       	movw	r30, r24
 b44:	05 90       	lpm	r0, Z+
 b46:	61 50       	subi	r22, 0x01	; 1
 b48:	70 40       	sbci	r23, 0x00	; 0
 b4a:	01 10       	cpse	r0, r1
 b4c:	d8 f7       	brcc	.-10     	; 0xb44 <strnlen_P+0x2>
 b4e:	80 95       	com	r24
 b50:	90 95       	com	r25
 b52:	8e 0f       	add	r24, r30
 b54:	9f 1f       	adc	r25, r31
 b56:	08 95       	ret

00000b58 <strnlen>:
 b58:	fc 01       	movw	r30, r24
 b5a:	61 50       	subi	r22, 0x01	; 1
 b5c:	70 40       	sbci	r23, 0x00	; 0
 b5e:	01 90       	ld	r0, Z+
 b60:	01 10       	cpse	r0, r1
 b62:	d8 f7       	brcc	.-10     	; 0xb5a <strnlen+0x2>
 b64:	80 95       	com	r24
 b66:	90 95       	com	r25
 b68:	8e 0f       	add	r24, r30
 b6a:	9f 1f       	adc	r25, r31
 b6c:	08 95       	ret

00000b6e <fputc>:
 b6e:	0f 93       	push	r16
 b70:	1f 93       	push	r17
 b72:	cf 93       	push	r28
 b74:	df 93       	push	r29
 b76:	18 2f       	mov	r17, r24
 b78:	09 2f       	mov	r16, r25
 b7a:	eb 01       	movw	r28, r22
 b7c:	8b 81       	ldd	r24, Y+3	; 0x03
 b7e:	81 fd       	sbrc	r24, 1
 b80:	09 c0       	rjmp	.+18     	; 0xb94 <fputc+0x26>
 b82:	1f ef       	ldi	r17, 0xFF	; 255
 b84:	0f ef       	ldi	r16, 0xFF	; 255
 b86:	81 2f       	mov	r24, r17
 b88:	90 2f       	mov	r25, r16
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	08 95       	ret
 b94:	82 ff       	sbrs	r24, 2
 b96:	14 c0       	rjmp	.+40     	; 0xbc0 <fputc+0x52>
 b98:	2e 81       	ldd	r18, Y+6	; 0x06
 b9a:	3f 81       	ldd	r19, Y+7	; 0x07
 b9c:	8c 81       	ldd	r24, Y+4	; 0x04
 b9e:	9d 81       	ldd	r25, Y+5	; 0x05
 ba0:	28 17       	cp	r18, r24
 ba2:	39 07       	cpc	r19, r25
 ba4:	3c f4       	brge	.+14     	; 0xbb4 <fputc+0x46>
 ba6:	e8 81       	ld	r30, Y
 ba8:	f9 81       	ldd	r31, Y+1	; 0x01
 baa:	cf 01       	movw	r24, r30
 bac:	01 96       	adiw	r24, 0x01	; 1
 bae:	99 83       	std	Y+1, r25	; 0x01
 bb0:	88 83       	st	Y, r24
 bb2:	10 83       	st	Z, r17
 bb4:	8e 81       	ldd	r24, Y+6	; 0x06
 bb6:	9f 81       	ldd	r25, Y+7	; 0x07
 bb8:	01 96       	adiw	r24, 0x01	; 1
 bba:	9f 83       	std	Y+7, r25	; 0x07
 bbc:	8e 83       	std	Y+6, r24	; 0x06
 bbe:	e3 cf       	rjmp	.-58     	; 0xb86 <fputc+0x18>
 bc0:	e8 85       	ldd	r30, Y+8	; 0x08
 bc2:	f9 85       	ldd	r31, Y+9	; 0x09
 bc4:	81 2f       	mov	r24, r17
 bc6:	09 95       	icall
 bc8:	89 2b       	or	r24, r25
 bca:	a1 f3       	breq	.-24     	; 0xbb4 <fputc+0x46>
 bcc:	da cf       	rjmp	.-76     	; 0xb82 <fputc+0x14>

00000bce <__ultoa_invert>:
 bce:	fa 01       	movw	r30, r20
 bd0:	aa 27       	eor	r26, r26
 bd2:	28 30       	cpi	r18, 0x08	; 8
 bd4:	51 f1       	breq	.+84     	; 0xc2a <__ultoa_invert+0x5c>
 bd6:	20 31       	cpi	r18, 0x10	; 16
 bd8:	81 f1       	breq	.+96     	; 0xc3a <__ultoa_invert+0x6c>
 bda:	e8 94       	clt
 bdc:	6f 93       	push	r22
 bde:	6e 7f       	andi	r22, 0xFE	; 254
 be0:	6e 5f       	subi	r22, 0xFE	; 254
 be2:	7f 4f       	sbci	r23, 0xFF	; 255
 be4:	8f 4f       	sbci	r24, 0xFF	; 255
 be6:	9f 4f       	sbci	r25, 0xFF	; 255
 be8:	af 4f       	sbci	r26, 0xFF	; 255
 bea:	b1 e0       	ldi	r27, 0x01	; 1
 bec:	3e d0       	rcall	.+124    	; 0xc6a <__ultoa_invert+0x9c>
 bee:	b4 e0       	ldi	r27, 0x04	; 4
 bf0:	3c d0       	rcall	.+120    	; 0xc6a <__ultoa_invert+0x9c>
 bf2:	67 0f       	add	r22, r23
 bf4:	78 1f       	adc	r23, r24
 bf6:	89 1f       	adc	r24, r25
 bf8:	9a 1f       	adc	r25, r26
 bfa:	a1 1d       	adc	r26, r1
 bfc:	68 0f       	add	r22, r24
 bfe:	79 1f       	adc	r23, r25
 c00:	8a 1f       	adc	r24, r26
 c02:	91 1d       	adc	r25, r1
 c04:	a1 1d       	adc	r26, r1
 c06:	6a 0f       	add	r22, r26
 c08:	71 1d       	adc	r23, r1
 c0a:	81 1d       	adc	r24, r1
 c0c:	91 1d       	adc	r25, r1
 c0e:	a1 1d       	adc	r26, r1
 c10:	20 d0       	rcall	.+64     	; 0xc52 <__ultoa_invert+0x84>
 c12:	09 f4       	brne	.+2      	; 0xc16 <__ultoa_invert+0x48>
 c14:	68 94       	set
 c16:	3f 91       	pop	r19
 c18:	2a e0       	ldi	r18, 0x0A	; 10
 c1a:	26 9f       	mul	r18, r22
 c1c:	11 24       	eor	r1, r1
 c1e:	30 19       	sub	r19, r0
 c20:	30 5d       	subi	r19, 0xD0	; 208
 c22:	31 93       	st	Z+, r19
 c24:	de f6       	brtc	.-74     	; 0xbdc <__ultoa_invert+0xe>
 c26:	cf 01       	movw	r24, r30
 c28:	08 95       	ret
 c2a:	46 2f       	mov	r20, r22
 c2c:	47 70       	andi	r20, 0x07	; 7
 c2e:	40 5d       	subi	r20, 0xD0	; 208
 c30:	41 93       	st	Z+, r20
 c32:	b3 e0       	ldi	r27, 0x03	; 3
 c34:	0f d0       	rcall	.+30     	; 0xc54 <__ultoa_invert+0x86>
 c36:	c9 f7       	brne	.-14     	; 0xc2a <__ultoa_invert+0x5c>
 c38:	f6 cf       	rjmp	.-20     	; 0xc26 <__ultoa_invert+0x58>
 c3a:	46 2f       	mov	r20, r22
 c3c:	4f 70       	andi	r20, 0x0F	; 15
 c3e:	40 5d       	subi	r20, 0xD0	; 208
 c40:	4a 33       	cpi	r20, 0x3A	; 58
 c42:	18 f0       	brcs	.+6      	; 0xc4a <__ultoa_invert+0x7c>
 c44:	49 5d       	subi	r20, 0xD9	; 217
 c46:	31 fd       	sbrc	r19, 1
 c48:	40 52       	subi	r20, 0x20	; 32
 c4a:	41 93       	st	Z+, r20
 c4c:	02 d0       	rcall	.+4      	; 0xc52 <__ultoa_invert+0x84>
 c4e:	a9 f7       	brne	.-22     	; 0xc3a <__ultoa_invert+0x6c>
 c50:	ea cf       	rjmp	.-44     	; 0xc26 <__ultoa_invert+0x58>
 c52:	b4 e0       	ldi	r27, 0x04	; 4
 c54:	a6 95       	lsr	r26
 c56:	97 95       	ror	r25
 c58:	87 95       	ror	r24
 c5a:	77 95       	ror	r23
 c5c:	67 95       	ror	r22
 c5e:	ba 95       	dec	r27
 c60:	c9 f7       	brne	.-14     	; 0xc54 <__ultoa_invert+0x86>
 c62:	00 97       	sbiw	r24, 0x00	; 0
 c64:	61 05       	cpc	r22, r1
 c66:	71 05       	cpc	r23, r1
 c68:	08 95       	ret
 c6a:	9b 01       	movw	r18, r22
 c6c:	ac 01       	movw	r20, r24
 c6e:	0a 2e       	mov	r0, r26
 c70:	06 94       	lsr	r0
 c72:	57 95       	ror	r21
 c74:	47 95       	ror	r20
 c76:	37 95       	ror	r19
 c78:	27 95       	ror	r18
 c7a:	ba 95       	dec	r27
 c7c:	c9 f7       	brne	.-14     	; 0xc70 <__ultoa_invert+0xa2>
 c7e:	62 0f       	add	r22, r18
 c80:	73 1f       	adc	r23, r19
 c82:	84 1f       	adc	r24, r20
 c84:	95 1f       	adc	r25, r21
 c86:	a0 1d       	adc	r26, r0
 c88:	08 95       	ret

00000c8a <__prologue_saves__>:
 c8a:	2f 92       	push	r2
 c8c:	3f 92       	push	r3
 c8e:	4f 92       	push	r4
 c90:	5f 92       	push	r5
 c92:	6f 92       	push	r6
 c94:	7f 92       	push	r7
 c96:	8f 92       	push	r8
 c98:	9f 92       	push	r9
 c9a:	af 92       	push	r10
 c9c:	bf 92       	push	r11
 c9e:	cf 92       	push	r12
 ca0:	df 92       	push	r13
 ca2:	ef 92       	push	r14
 ca4:	ff 92       	push	r15
 ca6:	0f 93       	push	r16
 ca8:	1f 93       	push	r17
 caa:	cf 93       	push	r28
 cac:	df 93       	push	r29
 cae:	cd b7       	in	r28, 0x3d	; 61
 cb0:	de b7       	in	r29, 0x3e	; 62
 cb2:	ca 1b       	sub	r28, r26
 cb4:	db 0b       	sbc	r29, r27
 cb6:	0f b6       	in	r0, 0x3f	; 63
 cb8:	f8 94       	cli
 cba:	de bf       	out	0x3e, r29	; 62
 cbc:	0f be       	out	0x3f, r0	; 63
 cbe:	cd bf       	out	0x3d, r28	; 61
 cc0:	09 94       	ijmp

00000cc2 <__epilogue_restores__>:
 cc2:	2a 88       	ldd	r2, Y+18	; 0x12
 cc4:	39 88       	ldd	r3, Y+17	; 0x11
 cc6:	48 88       	ldd	r4, Y+16	; 0x10
 cc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cca:	6e 84       	ldd	r6, Y+14	; 0x0e
 ccc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cce:	8c 84       	ldd	r8, Y+12	; 0x0c
 cd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 cd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 cd4:	b9 84       	ldd	r11, Y+9	; 0x09
 cd6:	c8 84       	ldd	r12, Y+8	; 0x08
 cd8:	df 80       	ldd	r13, Y+7	; 0x07
 cda:	ee 80       	ldd	r14, Y+6	; 0x06
 cdc:	fd 80       	ldd	r15, Y+5	; 0x05
 cde:	0c 81       	ldd	r16, Y+4	; 0x04
 ce0:	1b 81       	ldd	r17, Y+3	; 0x03
 ce2:	aa 81       	ldd	r26, Y+2	; 0x02
 ce4:	b9 81       	ldd	r27, Y+1	; 0x01
 ce6:	ce 0f       	add	r28, r30
 ce8:	d1 1d       	adc	r29, r1
 cea:	0f b6       	in	r0, 0x3f	; 63
 cec:	f8 94       	cli
 cee:	de bf       	out	0x3e, r29	; 62
 cf0:	0f be       	out	0x3f, r0	; 63
 cf2:	cd bf       	out	0x3d, r28	; 61
 cf4:	ed 01       	movw	r28, r26
 cf6:	08 95       	ret

00000cf8 <_exit>:
 cf8:	f8 94       	cli

00000cfa <__stop_program>:
 cfa:	ff cf       	rjmp	.-2      	; 0xcfa <__stop_program>
