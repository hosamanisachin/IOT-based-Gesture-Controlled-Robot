   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	lcd_write_nibble
  12               	lcd_write_nibble:
  13               	.LVL0:
  14               	.LFB6:
  15               		.file 1 "lcd.c"
   1:lcd.c         **** #include <avr/io.h>
   2:lcd.c         **** #include <util/delay.h>
   3:lcd.c         **** #include "lcd.h"
   4:lcd.c         **** 
   5:lcd.c         **** #define BV(bit) (1<<(bit))
   6:lcd.c         **** 
   7:lcd.c         **** #define LCD_DATA_DIR	DDRB
   8:lcd.c         **** #define LCD_DATA_PORT	PORTB
   9:lcd.c         **** #define LCD_DATA_PIN	PINB
  10:lcd.c         **** 
  11:lcd.c         **** #define LCD_CTRL_DIR	DDRB
  12:lcd.c         **** #define LCD_CTRL_PORT	PORTB
  13:lcd.c         **** #define LCD_CTRL_PIN	PINB
  14:lcd.c         **** 
  15:lcd.c         **** #define LCD_D4	0
  16:lcd.c         **** #define LCD_D5	1
  17:lcd.c         **** #define LCD_D6	2
  18:lcd.c         **** #define LCD_D7	3
  19:lcd.c         **** 
  20:lcd.c         **** #define LCD_BL	4
  21:lcd.c         **** #define LCD_EN	5
  22:lcd.c         **** #define LCD_RW	6
  23:lcd.c         **** #define LCD_RS	7
  24:lcd.c         **** 
  25:lcd.c         **** #define LCD_DATA_MASK (BV(LCD_D4)|BV(LCD_D5)|BV(LCD_D6)|BV(LCD_D7))
  26:lcd.c         **** #define LCD_CTRL_MASK (BV(LCD_BL)|BV(LCD_EN)|BV(LCD_RW)|BV(LCD_RS))
  27:lcd.c         **** 
  28:lcd.c         **** void lcd_write_nibble(uint8_t rs, uint8_t val)
  29:lcd.c         **** {
  16               		.loc 1 29 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  30:lcd.c         **** 	// rs=0: for cmd	and rs=1: for data
  31:lcd.c         **** 	if(rs==LCD_CMD)
  22               		.loc 1 31 2 view .LVU1
  23               		.loc 1 31 4 is_stmt 0 view .LVU2
  24 0000 8111      		cpse r24,__zero_reg__
  25 0002 00C0      		rjmp .L2
  32:lcd.c         **** 		LCD_CTRL_PORT &= ~BV(LCD_RS);
  26               		.loc 1 32 3 is_stmt 1 view .LVU3
  27               		.loc 1 32 17 is_stmt 0 view .LVU4
  28 0004 C798      		cbi 0x18,7
  29               	.L3:
  33:lcd.c         **** 	else
  34:lcd.c         **** 		LCD_CTRL_PORT |= BV(LCD_RS);
  35:lcd.c         **** 	
  36:lcd.c         **** 	asm("nop");		
  30               		.loc 1 36 2 is_stmt 1 view .LVU5
  31               	/* #APP */
  32               	 ;  36 "lcd.c" 1
  33 0006 0000      		nop
  34               	 ;  0 "" 2
  37:lcd.c         **** 
  38:lcd.c         **** 	LCD_CTRL_PORT &= ~BV(LCD_RW);	//rw=0:	write operation
  35               		.loc 1 38 2 view .LVU6
  36               		.loc 1 38 16 is_stmt 0 view .LVU7
  37               	/* #NOAPP */
  38 0008 C698      		cbi 0x18,6
  39:lcd.c         **** 
  40:lcd.c         **** 	LCD_DATA_PORT &= ~LCD_DATA_MASK;
  39               		.loc 1 40 2 is_stmt 1 view .LVU8
  40               		.loc 1 40 16 is_stmt 0 view .LVU9
  41 000a 88B3      		in r24,0x18
  42               	.LVL1:
  43               		.loc 1 40 16 view .LVU10
  44 000c 807F      		andi r24,lo8(-16)
  45 000e 88BB      		out 0x18,r24
  41:lcd.c         **** 	LCD_DATA_PORT |= val & 0x0F;	// write nibble
  46               		.loc 1 41 2 is_stmt 1 view .LVU11
  47               		.loc 1 41 16 is_stmt 0 view .LVU12
  48 0010 88B3      		in r24,0x18
  49               		.loc 1 41 23 view .LVU13
  50 0012 6F70      		andi r22,lo8(15)
  51               	.LVL2:
  52               		.loc 1 41 16 view .LVU14
  53 0014 682B      		or r22,r24
  54 0016 68BB      		out 0x18,r22
  42:lcd.c         **** 	
  43:lcd.c         **** 	LCD_CTRL_PORT |= BV(LCD_EN);	//en=1
  55               		.loc 1 43 2 is_stmt 1 view .LVU15
  56               		.loc 1 43 16 is_stmt 0 view .LVU16
  57 0018 C59A      		sbi 0x18,5
  44:lcd.c         **** 	asm("nop");
  58               		.loc 1 44 2 is_stmt 1 view .LVU17
  59               	/* #APP */
  60               	 ;  44 "lcd.c" 1
  61 001a 0000      		nop
  62               	 ;  0 "" 2
  45:lcd.c         **** 	LCD_CTRL_PORT &= ~BV(LCD_EN);	//en=0
  63               		.loc 1 45 2 view .LVU18
  64               		.loc 1 45 16 is_stmt 0 view .LVU19
  65               	/* #NOAPP */
  66 001c C598      		cbi 0x18,5
  67               	/* epilogue start */
  46:lcd.c         **** }
  68               		.loc 1 46 1 view .LVU20
  69 001e 0895      		ret
  70               	.LVL3:
  71               	.L2:
  34:lcd.c         **** 	
  72               		.loc 1 34 3 is_stmt 1 view .LVU21
  34:lcd.c         **** 	
  73               		.loc 1 34 17 is_stmt 0 view .LVU22
  74 0020 C79A      		sbi 0x18,7
  75 0022 00C0      		rjmp .L3
  76               		.cfi_endproc
  77               	.LFE6:
  79               	.global	lcd_write
  81               	lcd_write:
  82               	.LVL4:
  83               	.LFB7:
  47:lcd.c         **** 
  48:lcd.c         **** void lcd_write(uint8_t rs, uint8_t val)
  49:lcd.c         **** {
  84               		.loc 1 49 1 is_stmt 1 view -0
  85               		.cfi_startproc
  86               		.loc 1 49 1 is_stmt 0 view .LVU24
  87 0024 CF93      		push r28
  88               	.LCFI0:
  89               		.cfi_def_cfa_offset 3
  90               		.cfi_offset 28, -2
  91 0026 DF93      		push r29
  92               	.LCFI1:
  93               		.cfi_def_cfa_offset 4
  94               		.cfi_offset 29, -3
  95               	/* prologue: function */
  96               	/* frame size = 0 */
  97               	/* stack size = 2 */
  98               	.L__stack_usage = 2
  99 0028 D82F      		mov r29,r24
 100 002a C62F      		mov r28,r22
  50:lcd.c         **** 	uint8_t high = val >> 4, low = val & 0x0F;
 101               		.loc 1 50 2 is_stmt 1 view .LVU25
 102               	.LVL5:
  51:lcd.c         **** 	_delay_ms(3);	
 103               		.loc 1 51 2 view .LVU26
 104               	.LBB6:
 105               	.LBI6:
 106               		.file 2 "/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h"
   1:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    All rights reserved.
   5:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
   6:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
   9:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  12:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      distribution.
  16:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  17:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  21:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  33:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  35:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  38:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  endif
  42:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  44:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <inttypes.h>
  45:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #include <math.h>
  47:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  48:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \file */
  49:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \code
  51:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \endcode
  55:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  56:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     used.
  60:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  61:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  70:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     routines linked into the application.
  78:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  79:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  83:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** */
  84:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  85:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
  89:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  90:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef F_CPU
  91:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \def F_CPU
  95:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
  97:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 103:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****     integer value.
 107:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****  */
 108:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 110:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 111:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 114:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 115:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #  include <math.h>
 119:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #endif
 120:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 121:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** /**
 122:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \ingroup util_delay
 123:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 124:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 126:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 129:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 131:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 137:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 142:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    microseconds of delay.
 146:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 147:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    respectively.
 151:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 152:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \note
 153:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 154:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****    not available to the compiler then.
 163:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 164:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****  */
 165:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** void
 166:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** _delay_ms(double __ms)
 107               		.loc 2 166 1 view .LVU27
 108               	.LBB7:
 167:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 168:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	double __tmp ;
 109               		.loc 2 168 2 view .LVU28
 169:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 110               		.loc 2 172 2 view .LVU29
 173:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 111               		.loc 2 173 2 view .LVU30
 174:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 112               		.loc 2 174 2 view .LVU31
 175:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 176:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 179:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 182:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#else
 183:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		//round up by default
 184:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 113               		.loc 2 184 3 view .LVU32
 185:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 186:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 187:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 114               		.loc 2 187 2 view .LVU33
 115 002c 87EB      		ldi r24,lo8(2999)
 116 002e 9BE0      		ldi r25,hi8(2999)
 117 0030 0197      	1:	sbiw r24,1
 118 0032 01F4      		brne 1b
 119               	.LVL6:
 120               		.loc 2 187 2 is_stmt 0 view .LVU34
 121 0034 00C0      		rjmp .
 122 0036 0000      		nop
 123               	.LVL7:
 124               		.loc 2 187 2 view .LVU35
 125               	.LBE7:
 126               	.LBE6:
  52:lcd.c         **** 	lcd_write_nibble(rs, high);
 127               		.loc 1 52 2 is_stmt 1 view .LVU36
  50:lcd.c         **** 	_delay_ms(3);	
 128               		.loc 1 50 10 is_stmt 0 view .LVU37
 129 0038 6295      		swap r22
 130               	.LVL8:
  50:lcd.c         **** 	_delay_ms(3);	
 131               		.loc 1 50 10 view .LVU38
 132 003a 6F70      		andi r22,lo8(15)
 133               		.loc 1 52 2 view .LVU39
 134 003c 8D2F      		mov r24,r29
 135 003e 0E94 0000 		call lcd_write_nibble
 136               	.LVL9:
  53:lcd.c         **** 	lcd_write_nibble(rs, low);
 137               		.loc 1 53 2 is_stmt 1 view .LVU40
  50:lcd.c         **** 	_delay_ms(3);	
 138               		.loc 1 50 27 is_stmt 0 view .LVU41
 139 0042 6C2F      		mov r22,r28
 140 0044 6F70      		andi r22,lo8(15)
 141               	.LVL10:
 142               		.loc 1 53 2 view .LVU42
 143 0046 8D2F      		mov r24,r29
 144 0048 0E94 0000 		call lcd_write_nibble
 145               	.LVL11:
 146               	/* epilogue start */
  54:lcd.c         **** }
 147               		.loc 1 54 1 view .LVU43
 148 004c DF91      		pop r29
 149               	.LVL12:
 150               		.loc 1 54 1 view .LVU44
 151 004e CF91      		pop r28
 152               	.LVL13:
 153               		.loc 1 54 1 view .LVU45
 154 0050 0895      		ret
 155               		.cfi_endproc
 156               	.LFE7:
 158               	.global	lcd_init
 160               	lcd_init:
 161               	.LFB8:
  55:lcd.c         **** 
  56:lcd.c         **** void lcd_init()
  57:lcd.c         **** {
 162               		.loc 1 57 1 is_stmt 1 view -0
 163               		.cfi_startproc
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 0 */
 167               	.L__stack_usage = 0
  58:lcd.c         **** 	// set data and ctrl port as output
  59:lcd.c         **** 	LCD_DATA_DIR |= LCD_DATA_MASK;
 168               		.loc 1 59 2 view .LVU47
 169               		.loc 1 59 15 is_stmt 0 view .LVU48
 170 0052 87B3      		in r24,0x17
 171 0054 8F60      		ori r24,lo8(15)
 172 0056 87BB      		out 0x17,r24
  60:lcd.c         **** 	LCD_DATA_PORT &= ~LCD_DATA_MASK;
 173               		.loc 1 60 2 is_stmt 1 view .LVU49
 174               		.loc 1 60 16 is_stmt 0 view .LVU50
 175 0058 88B3      		in r24,0x18
 176 005a 807F      		andi r24,lo8(-16)
 177 005c 88BB      		out 0x18,r24
  61:lcd.c         **** 	LCD_CTRL_DIR |= LCD_CTRL_MASK;
 178               		.loc 1 61 2 is_stmt 1 view .LVU51
 179               		.loc 1 61 15 is_stmt 0 view .LVU52
 180 005e 87B3      		in r24,0x17
 181 0060 806F      		ori r24,lo8(-16)
 182 0062 87BB      		out 0x17,r24
  62:lcd.c         **** 	LCD_CTRL_PORT &= ~LCD_CTRL_MASK;
 183               		.loc 1 62 2 is_stmt 1 view .LVU53
 184               		.loc 1 62 16 is_stmt 0 view .LVU54
 185 0064 88B3      		in r24,0x18
 186 0066 8F70      		andi r24,lo8(15)
 187 0068 88BB      		out 0x18,r24
  63:lcd.c         **** 	// settling time 100ms
  64:lcd.c         **** 	_delay_ms(100);
 188               		.loc 1 64 2 is_stmt 1 view .LVU55
 189               	.LVL14:
 190               	.LBB8:
 191               	.LBI8:
 166:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** {
 192               		.loc 2 166 1 view .LVU56
 193               	.LBB9:
 168:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 194               		.loc 2 168 2 view .LVU57
 172:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 195               		.loc 2 172 2 view .LVU58
 173:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 196               		.loc 2 173 2 view .LVU59
 174:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 
 197               		.loc 2 174 2 view .LVU60
 184:/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/util/delay.h **** 	#endif
 198               		.loc 2 184 3 view .LVU61
 199               		.loc 2 187 2 view .LVU62
 200 006a 2FE7      		ldi r18,lo8(79999)
 201 006c 88E3      		ldi r24,hi8(79999)
 202 006e 91E0      		ldi r25,hlo8(79999)
 203 0070 2150      	1:	subi r18,1
 204 0072 8040      		sbci r24,0
 205 0074 9040      		sbci r25,0
 206 0076 01F4      		brne 1b
 207 0078 00C0      		rjmp .
 208 007a 0000      		nop
 209               	.LVL15:
 210               		.loc 2 187 2 is_stmt 0 view .LVU63
 211               	.LBE9:
 212               	.LBE8:
  65:lcd.c         **** 
  66:lcd.c         **** 	// send commands to lcd
  67:lcd.c         **** 
  68:lcd.c         **** 	// DL(0)=>4bit	N(1)=>2 lcd lines	F(0)=>font 5x8
  69:lcd.c         **** 	lcd_write(LCD_CMD, 0x28);
 213               		.loc 1 69 2 is_stmt 1 view .LVU64
 214 007c 68E2      		ldi r22,lo8(40)
 215 007e 80E0      		ldi r24,0
 216 0080 0E94 0000 		call lcd_write
 217               	.LVL16:
  70:lcd.c         **** 	
  71:lcd.c         **** 	// D(1)=>display on	C(0)=>no cursor	B(0)=>no blink
  72:lcd.c         **** 	lcd_write(LCD_CMD, 0x0C);
 218               		.loc 1 72 2 view .LVU65
 219 0084 6CE0      		ldi r22,lo8(12)
 220 0086 80E0      		ldi r24,0
 221 0088 0E94 0000 		call lcd_write
 222               	.LVL17:
  73:lcd.c         **** 	
  74:lcd.c         **** 	// lcd clear
  75:lcd.c         **** 	lcd_write(LCD_CMD, 0x01);
 223               		.loc 1 75 2 view .LVU66
 224 008c 61E0      		ldi r22,lo8(1)
 225 008e 80E0      		ldi r24,0
 226 0090 0E94 0000 		call lcd_write
 227               	.LVL18:
 228               	/* epilogue start */
  76:lcd.c         **** 	
  77:lcd.c         **** 	// I/D(1)=>increment cursor	S(0)=>no shift
  78:lcd.c         **** 	//lcd_write(LCD_CMD, 0x06);
  79:lcd.c         **** }
 229               		.loc 1 79 1 is_stmt 0 view .LVU67
 230 0094 0895      		ret
 231               		.cfi_endproc
 232               	.LFE8:
 234               	.global	lcd_gotoxy
 236               	lcd_gotoxy:
 237               	.LVL19:
 238               	.LFB9:
  80:lcd.c         **** 
  81:lcd.c         **** int lcd_gotoxy(uint8_t row, uint8_t col)
  82:lcd.c         **** {
 239               		.loc 1 82 1 is_stmt 1 view -0
 240               		.cfi_startproc
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
  83:lcd.c         **** 	if(row>1 || col>15)
 245               		.loc 1 83 2 view .LVU69
 246               		.loc 1 83 4 is_stmt 0 view .LVU70
 247 0096 8230      		cpi r24,lo8(2)
 248 0098 00F4      		brsh .L10
 249               		.loc 1 83 11 discriminator 1 view .LVU71
 250 009a 6031      		cpi r22,lo8(16)
 251 009c 00F4      		brsh .L10
  84:lcd.c         **** 		return 0; // false => failed
  85:lcd.c         **** 	if(row==0)	//row 0: ADDR = 0x00
 252               		.loc 1 85 2 is_stmt 1 view .LVU72
 253               		.loc 1 85 4 is_stmt 0 view .LVU73
 254 009e 8111      		cpse r24,__zero_reg__
 255 00a0 00C0      		rjmp .L8
 256               	.LVL20:
 257               	.LBB12:
 258               	.LBB13:
  86:lcd.c         **** 		lcd_write(LCD_CMD, 0x80+col);
 259               		.loc 1 86 3 is_stmt 1 view .LVU74
 260 00a2 6058      		subi r22,lo8(-(-128))
 261               	.LVL21:
 262               	.L11:
 263               		.loc 1 86 3 is_stmt 0 view .LVU75
 264               	.LBE13:
 265               	.LBE12:
  87:lcd.c         **** 	else		//row 1: ADDR = 0x40
  88:lcd.c         **** 		lcd_write(LCD_CMD, 0xC0+col);	
 266               		.loc 1 88 3 view .LVU76
 267 00a4 0E94 0000 		call lcd_write
 268               	.LVL22:
  89:lcd.c         **** 	return 1; // true => success
 269               		.loc 1 89 9 view .LVU77
 270 00a8 81E0      		ldi r24,lo8(1)
 271 00aa 90E0      		ldi r25,0
 272 00ac 0895      		ret
 273               	.LVL23:
 274               	.L8:
  88:lcd.c         **** 	return 1; // true => success
 275               		.loc 1 88 3 is_stmt 1 view .LVU78
 276 00ae 6054      		subi r22,lo8(-(-64))
 277               	.LVL24:
  88:lcd.c         **** 	return 1; // true => success
 278               		.loc 1 88 3 is_stmt 0 view .LVU79
 279 00b0 80E0      		ldi r24,0
 280               	.LVL25:
  88:lcd.c         **** 	return 1; // true => success
 281               		.loc 1 88 3 view .LVU80
 282 00b2 00C0      		rjmp .L11
 283               	.LVL26:
 284               	.L10:
  84:lcd.c         **** 	if(row==0)	//row 0: ADDR = 0x00
 285               		.loc 1 84 10 view .LVU81
 286 00b4 90E0      		ldi r25,0
 287 00b6 80E0      		ldi r24,0
 288               	.LVL27:
 289               	/* epilogue start */
  90:lcd.c         **** }
 290               		.loc 1 90 1 view .LVU82
 291 00b8 0895      		ret
 292               		.cfi_endproc
 293               	.LFE9:
 295               	.global	lcd_putchar
 297               	lcd_putchar:
 298               	.LVL28:
 299               	.LFB10:
  91:lcd.c         **** 
  92:lcd.c         **** void lcd_putchar(char ch)
  93:lcd.c         **** {
 300               		.loc 1 93 1 is_stmt 1 view -0
 301               		.cfi_startproc
 302               	/* prologue: function */
 303               	/* frame size = 0 */
 304               	/* stack size = 0 */
 305               	.L__stack_usage = 0
  94:lcd.c         **** 	lcd_write(LCD_DATA, ch);
 306               		.loc 1 94 2 view .LVU84
 307 00ba 682F      		mov r22,r24
 308 00bc 81E0      		ldi r24,lo8(1)
 309               	.LVL29:
 310               		.loc 1 94 2 is_stmt 0 view .LVU85
 311 00be 0E94 0000 		call lcd_write
 312               	.LVL30:
 313               	/* epilogue start */
  95:lcd.c         **** }
 314               		.loc 1 95 1 view .LVU86
 315 00c2 0895      		ret
 316               		.cfi_endproc
 317               	.LFE10:
 319               	.global	lcd_putstring
 321               	lcd_putstring:
 322               	.LVL31:
 323               	.LFB11:
  96:lcd.c         **** 
  97:lcd.c         **** void lcd_putstring(uint8_t row, const char *str)
  98:lcd.c         **** {
 324               		.loc 1 98 1 is_stmt 1 view -0
 325               		.cfi_startproc
 326               		.loc 1 98 1 is_stmt 0 view .LVU88
 327 00c4 0F93      		push r16
 328               	.LCFI2:
 329               		.cfi_def_cfa_offset 3
 330               		.cfi_offset 16, -2
 331 00c6 1F93      		push r17
 332               	.LCFI3:
 333               		.cfi_def_cfa_offset 4
 334               		.cfi_offset 17, -3
 335 00c8 CF93      		push r28
 336               	.LCFI4:
 337               		.cfi_def_cfa_offset 5
 338               		.cfi_offset 28, -4
 339 00ca DF93      		push r29
 340               	.LCFI5:
 341               		.cfi_def_cfa_offset 6
 342               		.cfi_offset 29, -5
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 4 */
 346               	.L__stack_usage = 4
 347 00cc 8B01      		movw r16,r22
  99:lcd.c         **** 	int cnt;
 348               		.loc 1 99 2 is_stmt 1 view .LVU89
 100:lcd.c         **** 	lcd_gotoxy(row, 0);
 349               		.loc 1 100 2 view .LVU90
 350 00ce 60E0      		ldi r22,0
 351               	.LVL32:
 352               		.loc 1 100 2 is_stmt 0 view .LVU91
 353 00d0 0E94 0000 		call lcd_gotoxy
 354               	.LVL33:
 101:lcd.c         **** 	for(cnt=0; *str!='\0' && cnt<16; ++cnt)
 355               		.loc 1 101 2 is_stmt 1 view .LVU92
 356               		.loc 1 101 2 is_stmt 0 view .LVU93
 357 00d4 E801      		movw r28,r16
 358 00d6 0F5E      		subi r16,-17
 359 00d8 1F4F      		sbci r17,-1
 360               	.LVL34:
 361               	.L14:
 362               		.loc 1 101 13 discriminator 1 view .LVU94
 363 00da 8991      		ld r24,Y+
 364               	.LVL35:
 365               		.loc 1 101 2 discriminator 1 view .LVU95
 366 00dc 8823      		tst r24
 367 00de 01F0      		breq .L13
 368               		.loc 1 101 24 discriminator 3 view .LVU96
 369 00e0 C017      		cp r28,r16
 370 00e2 D107      		cpc r29,r17
 371 00e4 01F4      		brne .L16
 372               	.L13:
 373               	/* epilogue start */
 102:lcd.c         **** 		lcd_putchar(*str++);
 103:lcd.c         **** }
 374               		.loc 1 103 1 view .LVU97
 375 00e6 DF91      		pop r29
 376 00e8 CF91      		pop r28
 377               	.LVL36:
 378               		.loc 1 103 1 view .LVU98
 379 00ea 1F91      		pop r17
 380 00ec 0F91      		pop r16
 381 00ee 0895      		ret
 382               	.LVL37:
 383               	.L16:
 102:lcd.c         **** 		lcd_putchar(*str++);
 384               		.loc 1 102 3 is_stmt 1 discriminator 4 view .LVU99
 102:lcd.c         **** 		lcd_putchar(*str++);
 385               		.loc 1 102 3 is_stmt 0 discriminator 4 view .LVU100
 386 00f0 0E94 0000 		call lcd_putchar
 387               	.LVL38:
 102:lcd.c         **** 		lcd_putchar(*str++);
 388               		.loc 1 102 3 discriminator 4 view .LVU101
 389 00f4 00C0      		rjmp .L14
 390               		.cfi_endproc
 391               	.LFE11:
 393               	.Letext0:
 394               		.file 3 "/home/acer/Desktop/CDAC/AVR/softwares/avr-gcc-8.2.0-x64-linux/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccu9G4Sa.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccu9G4Sa.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccu9G4Sa.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccu9G4Sa.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccu9G4Sa.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccu9G4Sa.s:12     .text:0000000000000000 lcd_write_nibble
     /tmp/ccu9G4Sa.s:81     .text:0000000000000024 lcd_write
     /tmp/ccu9G4Sa.s:160    .text:0000000000000052 lcd_init
     /tmp/ccu9G4Sa.s:236    .text:0000000000000096 lcd_gotoxy
     /tmp/ccu9G4Sa.s:297    .text:00000000000000ba lcd_putchar
     /tmp/ccu9G4Sa.s:321    .text:00000000000000c4 lcd_putstring

NO UNDEFINED SYMBOLS
